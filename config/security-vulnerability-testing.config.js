/**
 * NovaCron Security Testing and Vulnerability Scanning Configuration
 * Comprehensive security testing framework with penetration testing capabilities
 */

module.exports = {
  // Global Security Testing Configuration
  global: {
    enabled: true,
    outputDir: './test-results/security',
    complianceStandards: ['OWASP', 'NIST', 'ISO27001', 'PCI-DSS'],
    riskThresholds: {
      critical: 0,      // No critical vulnerabilities allowed
      high: 2,         // Max 2 high-risk vulnerabilities
      medium: 10,      // Max 10 medium-risk vulnerabilities
      low: 50,         // Max 50 low-risk vulnerabilities
      info: 100        // Max 100 informational findings
    }
  },
  
  // Static Application Security Testing (SAST)
  sast: {
    enabled: true,
    tools: ['eslint-security', 'semgrep', 'sonarqube', 'snyk'],
    
    // ESLint Security Plugin
    eslintSecurity: {
      enabled: true,
      configPath: './config/eslint-security.config.js',
      rules: {
        'security/detect-buffer-noassert': 'error',
        'security/detect-child-process': 'error',
        'security/detect-disable-mustache-escape': 'error',
        'security/detect-eval-with-expression': 'error',
        'security/detect-no-csrf-before-method-override': 'error',
        'security/detect-non-literal-fs-filename': 'error',
        'security/detect-non-literal-regexp': 'error',
        'security/detect-non-literal-require': 'error',
        'security/detect-object-injection': 'error',
        'security/detect-possible-timing-attacks': 'error',
        'security/detect-pseudoRandomBytes': 'error',
        'security/detect-unsafe-regex': 'error'
      }
    },
    
    // Semgrep Configuration
    semgrep: {
      enabled: true,
      rulesets: [
        'p/security-audit',
        'p/owasp-top-ten',
        'p/javascript',
        'p/typescript',
        'p/react',
        'p/nodejs'
      ],
      customRules: './config/semgrep-rules/',
      severity: ['ERROR', 'WARNING', 'INFO'],
      confidence: ['HIGH', 'MEDIUM', 'LOW']
    },
    
    // SonarQube Security
    sonarqube: {
      enabled: true,
      serverUrl: process.env.SONARQUBE_URL,
      projectKey: 'novacron-security',
      qualityGate: 'security-gate',
      securityHotspots: true,
      vulnerabilities: true,
      reliabilityRating: 'A',
      securityRating: 'A'
    },
    
    // Snyk Code Scanning
    snyk: {
      enabled: true,
      testPath: './src',
      severity: ['critical', 'high', 'medium', 'low'],
      includeIgnores: false,
      failOn: 'all'
    }
  },
  
  // Dynamic Application Security Testing (DAST)
  dast: {
    enabled: true,
    tools: ['zap', 'burp-suite', 'playwright-security'],
    
    // OWASP ZAP Configuration
    zap: {
      enabled: true,
      host: 'localhost',
      port: 8080,
      apiKey: process.env.ZAP_API_KEY,
      
      // Spider configuration
      spider: {
        enabled: true,
        maxDepth: 5,
        maxChildren: 10,
        acceptCookies: true,
        handleParameters: true,
        parseComments: true,
        parseRobots: true,
        parseSitemapXml: true
      },
      
      // Active scan configuration
      activeScan: {
        enabled: true,
        policy: 'security-policy',
        strength: 'MEDIUM',
        alertThreshold: 'MEDIUM',
        
        // Scan categories
        categories: [
          'injection',
          'broken-auth',
          'sensitive-data',
          'xxe',
          'broken-access',
          'misconfig',
          'xss',
          'deserialization',
          'components',
          'logging'
        ]
      },
      
      // Passive scan configuration
      passiveScan: {
        enabled: true,
        maxAlertsPerRule: 10,
        scanHeadersAllRequests: true
      }
    },
    
    // Playwright Security Testing
    playwrightSecurity: {
      enabled: true,
      testDir: './tests/security',
      
      // Security test categories
      categories: {
        authentication: {
          enabled: true,
          tests: [
            'login-brute-force',
            'password-policy',
            'session-management',
            'logout-functionality',
            'account-lockout',
            'two-factor-auth'
          ]
        },
        
        authorization: {
          enabled: true,
          tests: [
            'role-based-access',
            'privilege-escalation',
            'direct-object-reference',
            'function-level-access',
            'path-traversal'
          ]
        },
        
        inputValidation: {
          enabled: true,
          tests: [
            'sql-injection',
            'xss-reflected',
            'xss-stored',
            'command-injection',
            'ldap-injection',
            'xpath-injection',
            'file-upload-bypass'
          ]
        },
        
        sessionSecurity: {
          enabled: true,
          tests: [
            'session-fixation',
            'session-hijacking',
            'csrf-protection',
            'secure-cookies',
            'httponly-cookies',
            'samesite-cookies'
          ]
        },
        
        cryptography: {
          enabled: true,
          tests: [
            'ssl-tls-config',
            'certificate-validation',
            'weak-encryption',
            'key-management',
            'random-number-generation'
          ]
        }
      }
    }
  },
  
  // Interactive Application Security Testing (IAST)
  iast: {
    enabled: true,
    
    // Runtime security monitoring
    runtime: {
      enabled: true,
      agent: 'contrast-security',
      vulnerabilityTypes: [
        'sql-injection',
        'xss',
        'xxe',
        'path-traversal',
        'command-injection',
        'unsafe-file-upload'
      ]
    }
  },
  
  // Software Composition Analysis (SCA)
  sca: {
    enabled: true,
    tools: ['npm-audit', 'snyk', 'whitesource', 'dependabot'],
    
    // NPM Audit
    npmAudit: {
      enabled: true,
      level: 'moderate',
      production: true,
      auditReport: true,
      format: 'json'
    },
    
    // Snyk Open Source
    snykOpenSource: {
      enabled: true,
      severity: ['critical', 'high', 'medium'],
      monitor: true,
      failOn: 'upgradable'
    },
    
    // License compliance
    licenseCompliance: {
      enabled: true,
      allowedLicenses: [
        'MIT',
        'Apache-2.0',
        'BSD-2-Clause',
        'BSD-3-Clause',
        'ISC'
      ],
      blockedLicenses: [
        'GPL-2.0',
        'GPL-3.0',
        'AGPL-1.0',
        'AGPL-3.0'
      ]
    }
  },
  
  // Container Security Testing
  containerSecurity: {
    enabled: true,
    
    // Docker image scanning
    imageScanning: {
      enabled: true,
      tools: ['trivy', 'clair', 'snyk'],
      
      // Trivy configuration
      trivy: {
        enabled: true,
        severities: ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'],
        vulnTypes: ['os', 'library'],
        ignoreUnfixed: false,
        format: 'json'
      },
      
      // Base image security
      baseImage: {
        allowedImages: [
          'node:18-alpine',
          'nginx:alpine',
          'postgres:14-alpine',
          'redis:alpine'
        ],
        scanBaseImages: true,
        requireMinimalImages: true
      }
    },
    
    // Runtime container security
    runtime: {
      enabled: true,
      monitoring: [
        'process-monitoring',
        'file-integrity',
        'network-activity',
        'privilege-escalation'
      ]
    }
  },
  
  // Infrastructure Security Testing
  infrastructure: {
    enabled: true,
    
    // Network security
    network: {
      enabled: true,
      scans: [
        'port-scanning',
        'service-enumeration',
        'ssl-configuration',
        'certificate-validation',
        'firewall-rules'
      ],
      
      tools: ['nmap', 'sslyze', 'testssl']
    },
    
    // Cloud security (if applicable)
    cloud: {
      enabled: true,
      providers: ['aws', 'azure', 'gcp'],
      
      // AWS Security
      aws: {
        enabled: true,
        services: [
          'iam-policies',
          'security-groups',
          's3-buckets',
          'cloudtrail',
          'config-rules'
        ]
      }
    }
  },
  
  // API Security Testing
  apiSecurity: {
    enabled: true,
    
    // REST API Security
    rest: {
      enabled: true,
      baseUrl: process.env.API_BASE_URL || 'http://localhost:8080/api/v1',
      
      tests: [
        'authentication-bypass',
        'authorization-flaws',
        'injection-attacks',
        'excessive-data-exposure',
        'lack-of-resources-rate-limiting',
        'broken-function-level-authorization',
        'mass-assignment',
        'security-misconfiguration',
        'improper-assets-management',
        'insufficient-logging-monitoring'
      ],
      
      // OWASP API Top 10
      owaspApi: {
        enabled: true,
        version: '2023',
        categories: [
          'API1-broken-object-level-authorization',
          'API2-broken-authentication',
          'API3-broken-object-property-level-authorization',
          'API4-unrestricted-resource-consumption',
          'API5-broken-function-level-authorization',
          'API6-unrestricted-access-to-sensitive-business-flows',
          'API7-server-side-request-forgery',
          'API8-security-misconfiguration',
          'API9-improper-inventory-management',
          'API10-unsafe-consumption-of-apis'
        ]
      }
    },
    
    // GraphQL Security (if applicable)
    graphql: {
      enabled: false, // Set to true if using GraphQL
      endpoint: '/graphql',
      tests: [
        'introspection-enabled',
        'query-depth-limiting',
        'query-complexity-analysis',
        'rate-limiting',
        'authorization-bypass'
      ]
    }
  },
  
  // Web Application Security Testing
  webApplication: {
    enabled: true,
    
    // OWASP Top 10 Testing
    owaspTop10: {
      enabled: true,
      version: '2021',
      
      categories: {
        'A01-broken-access-control': {
          enabled: true,
          tests: [
            'vertical-privilege-escalation',
            'horizontal-privilege-escalation',
            'directory-traversal',
            'insecure-direct-object-reference'
          ]
        },
        
        'A02-cryptographic-failures': {
          enabled: true,
          tests: [
            'weak-ssl-tls',
            'insecure-random-values',
            'weak-hashing-algorithms',
            'plaintext-storage'
          ]
        },
        
        'A03-injection': {
          enabled: true,
          tests: [
            'sql-injection',
            'nosql-injection',
            'command-injection',
            'ldap-injection',
            'xpath-injection'
          ]
        },
        
        'A04-insecure-design': {
          enabled: true,
          tests: [
            'threat-modeling',
            'secure-design-patterns',
            'reference-architectures'
          ]
        },
        
        'A05-security-misconfiguration': {
          enabled: true,
          tests: [
            'default-credentials',
            'unnecessary-features',
            'error-handling',
            'security-headers'
          ]
        },
        
        'A06-vulnerable-components': {
          enabled: true,
          tests: [
            'outdated-dependencies',
            'known-vulnerabilities',
            'unsupported-versions'
          ]
        },
        
        'A07-identification-authentication-failures': {
          enabled: true,
          tests: [
            'brute-force-attacks',
            'credential-stuffing',
            'session-management',
            'weak-passwords'
          ]
        },
        
        'A08-software-data-integrity-failures': {
          enabled: true,
          tests: [
            'unsigned-updates',
            'insecure-deserialization',
            'untrusted-sources'
          ]
        },
        
        'A09-security-logging-monitoring-failures': {
          enabled: true,
          tests: [
            'audit-logging',
            'log-integrity',
            'monitoring-alerts',
            'incident-response'
          ]
        },
        
        'A10-server-side-request-forgery': {
          enabled: true,
          tests: [
            'ssrf-blind',
            'ssrf-out-of-band',
            'internal-service-access'
          ]
        }
      }
    },
    
    // Security headers testing
    securityHeaders: {
      enabled: true,
      requiredHeaders: {
        'X-Frame-Options': 'DENY',
        'X-Content-Type-Options': 'nosniff',
        'X-XSS-Protection': '1; mode=block',
        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
        'Content-Security-Policy': 'default-src \'self\'',
        'Referrer-Policy': 'strict-origin-when-cross-origin',
        'Permissions-Policy': 'geolocation=(), microphone=(), camera=()'
      }
    }
  },
  
  // Penetration Testing
  penetrationTesting: {
    enabled: true,
    scope: ['web-application', 'api', 'infrastructure'],
    
    // Automated penetration testing
    automated: {
      enabled: true,
      tools: ['nuclei', 'sqlmap', 'wpscan'],
      
      // Nuclei templates
      nuclei: {
        enabled: true,
        templates: [
          'cves',
          'exposures',
          'technologies',
          'misconfigurations',
          'vulnerabilities'
        ],
        severity: ['critical', 'high', 'medium', 'low', 'info']
      }
    },
    
    // Manual penetration testing checklist
    manual: {
      enabled: true,
      phases: [
        'reconnaissance',
        'enumeration',
        'vulnerability-assessment',
        'exploitation',
        'post-exploitation',
        'reporting'
      ]
    }
  },
  
  // Security Test Automation
  automation: {
    enabled: true,
    
    // CI/CD Integration
    cicd: {
      enabled: true,
      stages: ['pre-commit', 'build', 'test', 'deploy'],
      
      // Security gates
      gates: {
        'pre-commit': ['sast', 'secrets-scanning'],
        'build': ['sca', 'container-scanning'],
        'test': ['dast', 'api-security'],
        'deploy': ['infrastructure-security']
      }
    },
    
    // Continuous security monitoring
    monitoring: {
      enabled: true,
      interval: '24h',
      automated: true,
      alerting: true
    }
  },
  
  // Security Reporting
  reporting: {
    enabled: true,
    formats: ['html', 'json', 'sarif', 'pdf'],
    
    // Report sections
    sections: {
      executiveSummary: true,
      riskAssessment: true,
      findings: true,
      remediation: true,
      compliance: true,
      trends: true
    },
    
    // Compliance reporting
    compliance: {
      owasp: true,
      nist: true,
      pci: true,
      iso27001: true,
      sox: true
    },
    
    // Risk scoring
    riskScoring: {
      enabled: true,
      methodology: 'cvss3.1',
      factors: ['confidentiality', 'integrity', 'availability']
    }
  },
  
  // Integration with Security Tools
  integrations: {
    // SIEM Integration
    siem: {
      enabled: true,
      platform: 'splunk', // or 'elk', 'qradar'
      endpoint: process.env.SIEM_ENDPOINT,
      format: 'json'
    },
    
    // Vulnerability Management
    vulnerabilityManagement: {
      enabled: true,
      platform: 'qualys', // or 'tenable', 'rapid7'
      apiKey: process.env.VM_API_KEY
    },
    
    // Ticketing System
    ticketing: {
      enabled: true,
      system: 'jira',
      project: 'SEC',
      issueTypes: {
        critical: 'Bug',
        high: 'Bug',
        medium: 'Task',
        low: 'Story'
      }
    }
  }
};