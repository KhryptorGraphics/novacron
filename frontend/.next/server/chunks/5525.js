"use strict";exports.id=5525,exports.ids=[5525],exports.modules={5035:(t,e,s)=>{s.d(e,{E:()=>r});const a=process.env.NEXT_PUBLIC_API_URL||"http://localhost:8090";const r=new class{async request(t,e={}){const s=`${a}${t}`,r={headers:{"Content-Type":"application/json",...e.headers},...e};try{const t=await fetch(s,r);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(i){throw i}}async getHealth(){return this.request("/health")}async listVMs(){return this.request("/api/v1/vms")}async getVM(t){return this.request(`/api/v1/vms/${t}`)}async createVM(t){return this.request("/api/v1/vms",{method:"POST",body:JSON.stringify(t)})}async deleteVM(t){return this.request(`/api/v1/vms/${t}`,{method:"DELETE"})}async startVM(t){return this.request(`/api/v1/vms/${t}/start`,{method:"POST"})}async stopVM(t){return this.request(`/api/v1/vms/${t}/stop`,{method:"POST"})}async getVMMetrics(t){return this.request(`/api/v1/vms/${t}/metrics`)}async listJobs(){return(await this.request("/api/jobs")).data}async getJob(t){return(await this.request(`/api/jobs/${t}`)).data}async createJob(t){return(await this.request("/api/jobs",{method:"POST",body:JSON.stringify(t)})).data}async updateJob(t,e){return(await this.request(`/api/jobs/${t}`,{method:"PUT",body:JSON.stringify(e)})).data}async deleteJob(t){return(await this.request(`/api/jobs/${t}`,{method:"DELETE"})).success}async executeJob(t){return(await this.request(`/api/jobs/${t}/execute`,{method:"POST"})).data}async getJobExecutions(t){return(await this.request(`/api/jobs/${t}/executions`)).data}async listWorkflows(){return(await this.request("/api/workflows")).data}async getWorkflow(t){return(await this.request(`/api/workflows/${t}`)).data}async createWorkflow(t){return(await this.request("/api/workflows",{method:"POST",body:JSON.stringify(t)})).data}async updateWorkflow(t,e){return(await this.request(`/api/workflows/${t}`,{method:"PUT",body:JSON.stringify(e)})).data}async deleteWorkflow(t){return(await this.request(`/api/workflows/${t}`,{method:"DELETE"})).success}async executeWorkflow(t){return(await this.request(`/api/workflows/${t}/execute`,{method:"POST"})).data}async getWorkflowExecution(t){return(await this.request(`/api/workflows/executions/${t}`)).data}async register(t){return this.request("/api/auth/register",{method:"POST",body:JSON.stringify(t)})}async login(t,e){return this.request("/api/auth/login",{method:"POST",body:JSON.stringify({email:t,password:e})})}async checkEmailAvailability(t){return this.request(`/api/auth/check-email?email=${encodeURIComponent(t)}`)}async resendVerificationEmail(t){return this.request("/api/auth/resend-verification",{method:"POST",body:JSON.stringify({email:t})})}async verifyEmail(t){return this.request("/api/auth/verify-email",{method:"POST",body:JSON.stringify({token:t})})}createWebSocket(t,e){try{const s=a.replace("http","ws")+"/ws",r=new WebSocket(s);return r.onmessage=e=>{try{const s=JSON.parse(e.data);t(s)}catch(s){}},r.onerror=t=>{e&&e(t)},r}catch(s){return null}}}}};