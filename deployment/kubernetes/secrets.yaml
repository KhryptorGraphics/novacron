# NovaCron Kubernetes Secrets
# Version: 1.0.0
# Description: Production secrets configuration template
# 
# IMPORTANT: This is a template file. Real secrets should be:
# 1. Generated using secure random values
# 2. Stored in a secrets management system (Vault, AWS Secrets Manager, etc.)
# 3. Applied using GitOps tools with encryption (Sealed Secrets, SOPS, etc.)

apiVersion: v1
kind: Secret
metadata:
  name: novacron-app-secrets
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: secrets
type: Opaque
data:
  # JWT Secret (base64 encoded)
  jwt-secret: <JWT_SECRET_BASE64>
  
  # API Encryption Key (base64 encoded)
  api-encryption-key: <API_ENCRYPTION_KEY_BASE64>
  
  # Admin API Key (base64 encoded)
  admin-api-key: <ADMIN_API_KEY_BASE64>
  
  # Webhook URLs
  security-webhook-url: <SECURITY_WEBHOOK_URL_BASE64>
  health-webhook-url: <HEALTH_WEBHOOK_URL_BASE64>

---
apiVersion: v1
kind: Secret
metadata:
  name: novacron-db-secrets
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: database
type: Opaque
data:
  # Database credentials
  postgres-user: <DB_USER_BASE64>
  postgres-password: <DB_PASSWORD_BASE64>
  postgres-database: <DB_NAME_BASE64>
  
  # Database connection URLs
  database-url: <DATABASE_URL_BASE64>
  readonly-database-url: <READONLY_DATABASE_URL_BASE64>

---
apiVersion: v1
kind: Secret
metadata:
  name: novacron-redis-secrets
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: cache
type: Opaque
data:
  # Redis authentication
  redis-password: <REDIS_PASSWORD_BASE64>
  redis-url: <REDIS_URL_BASE64>

---
# TLS Certificates Secret
apiVersion: v1
kind: Secret
metadata:
  name: novacron-tls-certs
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # Server Certificate
  tls.crt: <SERVER_CERT_BASE64>
  tls.key: <SERVER_KEY_BASE64>
  
  # CA Certificate
  ca.crt: <CA_CERT_BASE64>

---
# Database TLS Certificates
apiVersion: v1
kind: Secret
metadata:
  name: novacron-db-tls-certs
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: database-tls
type: Opaque
data:
  # Database Client Certificates
  client.crt: <DB_CLIENT_CERT_BASE64>
  client.key: <DB_CLIENT_KEY_BASE64>
  ca.crt: <DB_CA_CERT_BASE64>

---
# Cloud Provider Secrets (AWS Example)
apiVersion: v1
kind: Secret
metadata:
  name: novacron-aws-secrets
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: cloud
type: Opaque
data:
  # AWS Credentials
  aws-access-key-id: <AWS_ACCESS_KEY_ID_BASE64>
  aws-secret-access-key: <AWS_SECRET_ACCESS_KEY_BASE64>
  aws-region: <AWS_REGION_BASE64>
  
  # S3 Backup Configuration
  backup-s3-bucket: <BACKUP_S3_BUCKET_BASE64>

---
# Monitoring Secrets
apiVersion: v1
kind: Secret
metadata:
  name: novacron-monitoring-secrets
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: monitoring
type: Opaque
data:
  # Grafana Admin Password
  grafana-admin-password: <GRAFANA_ADMIN_PASSWORD_BASE64>
  grafana-secret-key: <GRAFANA_SECRET_KEY_BASE64>

---
# Email/SMTP Secrets
apiVersion: v1
kind: Secret
metadata:
  name: novacron-smtp-secrets
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: notifications
type: Opaque
data:
  smtp-host: <SMTP_HOST_BASE64>
  smtp-port: <SMTP_PORT_BASE64>
  smtp-user: <SMTP_USER_BASE64>
  smtp-password: <SMTP_PASSWORD_BASE64>
  smtp-from: <SMTP_FROM_BASE64>

---
# Image Pull Secrets (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: novacron-registry-secret
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <DOCKER_CONFIG_JSON_BASE64>

---
# Script to generate secrets (to be run manually)
# #!/bin/bash
# # Generate secure secrets for NovaCron deployment
# 
# # Generate random passwords and keys
# JWT_SECRET=$(openssl rand -base64 64 | tr -d '\n' | base64 -w 0)
# API_KEY=$(openssl rand -hex 32 | base64 -w 0)
# DB_PASSWORD=$(openssl rand -base64 32 | tr -d '\n' | base64 -w 0)
# REDIS_PASSWORD=$(openssl rand -base64 32 | tr -d '\n' | base64 -w 0)
# GRAFANA_PASSWORD=$(openssl rand -base64 16 | tr -d '\n' | base64 -w 0)
# 
# # Replace placeholders in secrets file
# sed -i "s/<JWT_SECRET_BASE64>/$JWT_SECRET/g" secrets.yaml
# sed -i "s/<API_ENCRYPTION_KEY_BASE64>/$API_KEY/g" secrets.yaml
# sed -i "s/<DB_PASSWORD_BASE64>/$DB_PASSWORD/g" secrets.yaml
# sed -i "s/<REDIS_PASSWORD_BASE64>/$REDIS_PASSWORD/g" secrets.yaml
# sed -i "s/<GRAFANA_ADMIN_PASSWORD_BASE64>/$GRAFANA_PASSWORD/g" secrets.yaml
# 
# echo "Secrets generated successfully!"
# echo "Remember to:"
# echo "1. Set certificate values"
# echo "2. Set webhook URLs"
# echo "3. Set cloud provider credentials"
# echo "4. Apply secrets before deploying the application"