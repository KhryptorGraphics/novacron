apiVersion: apps/v1
kind: Deployment
metadata:
  name: novacron-api
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: novacron
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: novacron
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: novacron-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      imagePullSecrets:
        - name: novacron-registry-secret
      
      initContainers:
        - name: migration
          image: novacron/api-server:latest
          imagePullPolicy: Always
          command: ["/app/migrate", "up"]
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: novacron-db-secrets
                  key: database-url
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 256Mi
      
      containers:
        - name: api-server
          image: novacron/api-server:latest
          imagePullPolicy: Always
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          
          ports:
            - name: http-api
              containerPort: 8091
              protocol: TCP
            - name: websocket
              containerPort: 8093
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          env:
            - name: ENVIRONMENT
              value: "production"
            - name: DEBUG
              value: "false"
            - name: API_PORT
              value: "8091"
            - name: WS_PORT
              value: "8093"
            - name: METRICS_PORT
              value: "9090"
            
            # Database Configuration
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: novacron-db-secrets
                  key: database-url
            
            # Security Configuration
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: novacron-app-secrets
                  key: jwt-secret
            - name: API_ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: novacron-app-secrets
                  key: api-encryption-key
            
            # Redis Configuration
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: novacron-redis-secrets
                  key: redis-url
            
            # Cloud Configuration
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: novacron-aws-secrets
                  key: aws-access-key-id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: novacron-aws-secrets
                  key: aws-secret-access-key
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: novacron-aws-secrets
                  key: aws-region
          
          volumeMounts:
            - name: config
              mountPath: /etc/novacron
              readOnly: true
            - name: certs
              mountPath: /etc/certs
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: var-run
              mountPath: /var/run
          
          livenessProbe:
            httpGet:
              path: /health
              port: http-api
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health
              port: http-api
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          startupProbe:
            httpGet:
              path: /health
              port: http-api
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 18 # 3 minutes total
          
          resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 1Gi
      
      volumes:
        - name: config
          configMap:
            name: novacron-app-config
        - name: certs
          secret:
            secretName: novacron-tls-certs
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: var-run
          emptyDir:
            sizeLimit: 100Mi
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - novacron
                    - key: app.kubernetes.io/component
                      operator: In
                      values:
                        - api
                topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: novacron-frontend
  namespace: novacron
  labels:
    app.kubernetes.io/name: novacron
    app.kubernetes.io/component: frontend
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: novacron
      app.kubernetes.io/component: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: novacron
        app.kubernetes.io/component: frontend
        app.kubernetes.io/version: "1.0.0"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        runAsGroup: 101
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault
      
      imagePullSecrets:
        - name: novacron-registry-secret
      
      containers:
        - name: nginx
          image: novacron/frontend:latest
          imagePullPolicy: Always
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 101
            runAsGroup: 101
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
          
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx
              readOnly: true
            - name: certs
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: var-cache
              mountPath: /var/cache/nginx
            - name: var-run
              mountPath: /var/run
            - name: var-log
              mountPath: /var/log/nginx
          
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 256Mi
      
      volumes:
        - name: nginx-config
          configMap:
            name: novacron-nginx-config
        - name: certs
          secret:
            secretName: novacron-tls-certs
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
        - name: var-cache
          emptyDir:
            sizeLimit: 100Mi
        - name: var-run
          emptyDir:
            sizeLimit: 100Mi
        - name: var-log
          emptyDir:
            sizeLimit: 100Mi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: novacron-postgres
  namespace: novacron
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/version: "15"
spec:
  serviceName: novacron-postgres
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/version: "15"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      
      containers:
        - name: postgres
          image: postgres:15-alpine
          imagePullPolicy: Always
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
            capabilities:
              drop:
                - ALL
          
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: novacron-db-secrets
                  key: postgres-database
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: novacron-db-secrets
                  key: postgres-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: novacron-db-secrets
                  key: postgres-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-config
              mountPath: /etc/postgresql
              readOnly: true
            - name: certs
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: var-run
              mountPath: /var/run/postgresql
            - name: var-log
              mountPath: /var/log/postgresql
          
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 2Gi
      
      volumes:
        - name: postgres-config
          configMap:
            name: novacron-postgres-config
        - name: certs
          secret:
            secretName: novacron-db-tls-certs
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: var-run
          emptyDir:
            sizeLimit: 100Mi
        - name: var-log
          emptyDir:
            sizeLimit: 1Gi
  
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
        labels:
          app.kubernetes.io/name: postgres
          app.kubernetes.io/component: database
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 100Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: novacron
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/version: "2.45.0"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/version: "2.45.0"
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          imagePullPolicy: IfNotPresent
          
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
          
          ports:
            - name: web
              containerPort: 9090
              protocol: TCP
          
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus/'
            - '--storage.tsdb.retention.time=30d'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--web.enable-lifecycle'
          
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
              readOnly: true
            - name: storage
              mountPath: /prometheus
            - name: tmp
              mountPath: /tmp
          
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: web
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /-/ready
              port: web
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          resources:
            limits:
              cpu: 2
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 2Gi
      
      volumes:
        - name: config
          configMap:
            name: novacron-prometheus-config
        - name: storage
          persistentVolumeClaim:
            claimName: prometheus-storage
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi