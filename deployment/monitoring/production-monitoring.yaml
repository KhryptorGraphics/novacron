# Prometheus Configuration
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'novacron-prod'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  - "/etc/prometheus/rules/*.yml"

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # API Server metrics
  - job_name: 'api-server'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - novacron
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: api-server
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__

  # Frontend metrics
  - job_name: 'frontend'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - novacron
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: frontend

  # PostgreSQL Exporter metrics
  - job_name: 'postgres-exporter'
    static_configs:
      - targets: ['postgres-exporter:9187']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'postgres-primary'

  # Redis Exporter metrics
  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['redis-exporter:9121']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        replacement: 'redis-cluster'

  # Node metrics
  - job_name: 'node'
    kubernetes_sd_configs:
      - role: node
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)

  # Kubernetes metrics
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  # AI Engine metrics
  - job_name: 'ai-engine'
    static_configs:
      - targets: ['ai-engine:8000']
    metrics_path: '/metrics'

---
# Alerting Rules
groups:
  - name: novacron_alerts
    interval: 30s
    rules:
      # System Health Alerts
      - alert: HighCPUUsage
        expr: rate(process_cpu_seconds_total[5m]) * 100 > 80
        for: 5m
        labels:
          severity: warning
          component: system
        annotations:
          summary: "High CPU usage detected"
          description: "{{ $labels.instance }} has CPU usage above 80% (current value: {{ $value }}%)"

      - alert: HighMemoryUsage
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 90
        for: 5m
        labels:
          severity: critical
          component: system
        annotations:
          summary: "High memory usage detected"
          description: "{{ $labels.instance }} has memory usage above 90% (current value: {{ $value }}%)"

      - alert: DiskSpaceRunningLow
        expr: (node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"}) * 100 < 10
        for: 5m
        labels:
          severity: critical
          component: storage
        annotations:
          summary: "Disk space running low"
          description: "{{ $labels.instance }} has less than 10% disk space available"

      # Application Alerts
      - alert: APIServerDown
        expr: up{job="api-server"} == 0
        for: 1m
        labels:
          severity: critical
          component: api
        annotations:
          summary: "API Server is down"
          description: "API Server {{ $labels.instance }} has been down for more than 1 minute"

      - alert: HighAPILatency
        expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m])) > 1
        for: 5m
        labels:
          severity: warning
          component: api
        annotations:
          summary: "High API latency detected"
          description: "99th percentile latency is above 1 second (current value: {{ $value }}s)"

      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.05
        for: 5m
        labels:
          severity: warning
          component: api
        annotations:
          summary: "High error rate detected"
          description: "Error rate is above 5% (current value: {{ $value | humanizePercentage }})"

      # Database Alerts
      - alert: PostgreSQLDown
        expr: up{job="postgres-exporter"} == 0
        for: 1m
        labels:
          severity: critical
          component: database
        annotations:
          summary: "PostgreSQL is down"
          description: "PostgreSQL instance {{ $labels.instance }} has been down for more than 1 minute"

      - alert: PostgreSQLSlowQueries
        expr: rate(pg_stat_database_blks_read_total{datname="novacron"}[5m]) > 1000
        for: 5m
        labels:
          severity: warning
          component: database
        annotations:
          summary: "PostgreSQL slow queries detected"
          description: "High number of block reads indicating slow queries"

      - alert: PostgreSQLConnectionsHigh
        expr: pg_stat_database_numbackends{datname="novacron"} / pg_settings_max_connections{} > 0.8
        for: 5m
        labels:
          severity: warning
          component: database
        annotations:
          summary: "PostgreSQL connections near limit"
          description: "Database connections are at {{ $value | humanizePercentage }} of maximum"

      # Redis Alerts
      - alert: RedisDown
        expr: up{job="redis-exporter"} == 0
        for: 1m
        labels:
          severity: critical
          component: cache
        annotations:
          summary: "Redis is down"
          description: "Redis instance {{ $labels.instance }} has been down for more than 1 minute"

      - alert: RedisMemoryHigh
        expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.9
        for: 5m
        labels:
          severity: warning
          component: cache
        annotations:
          summary: "Redis memory usage high"
          description: "Redis memory usage is above 90% (current value: {{ $value | humanizePercentage }})"

      # Distributed System Alerts
      - alert: ClusterNodeDown
        expr: kube_node_status_condition{condition="Ready",status="true"} == 0
        for: 5m
        labels:
          severity: critical
          component: cluster
        annotations:
          summary: "Kubernetes node not ready"
          description: "Node {{ $labels.node }} has been not ready for more than 5 minutes"

      - alert: PodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
        for: 5m
        labels:
          severity: warning
          component: kubernetes
        annotations:
          summary: "Pod is crash looping"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping"

      - alert: FederationConnectionLost
        expr: federation_cluster_status{status="connected"} == 0
        for: 5m
        labels:
          severity: critical
          component: federation
        annotations:
          summary: "Federation connection lost"
          description: "Connection to federated cluster {{ $labels.cluster }} has been lost"

      # Security Alerts
      - alert: UnauthorizedAccessAttempt
        expr: rate(auth_failed_attempts_total[5m]) > 10
        for: 1m
        labels:
          severity: critical
          component: security
        annotations:
          summary: "High rate of unauthorized access attempts"
          description: "More than 10 failed authentication attempts per minute detected"

      - alert: SSLCertificateExpiringSoon
        expr: (ssl_cert_expiry_timestamp_seconds - time()) / 86400 < 30
        for: 1h
        labels:
          severity: warning
          component: security
        annotations:
          summary: "SSL certificate expiring soon"
          description: "SSL certificate for {{ $labels.domain }} expires in {{ $value }} days"

      # Performance Alerts
      - alert: P2PNetworkDegraded
        expr: p2p_peer_count < 3
        for: 5m
        labels:
          severity: warning
          component: p2p
        annotations:
          summary: "P2P network degraded"
          description: "P2P network has less than 3 peers connected"

      - alert: VMigrationFailed
        expr: increase(vm_migration_failures_total[1h]) > 0
        for: 1m
        labels:
          severity: warning
          component: migration
        annotations:
          summary: "VM migration failed"
          description: "VM migration failure detected in the last hour"

      - alert: SupercomputeFabricDegraded
        expr: supercompute_fabric_health < 0.8
        for: 10m
        labels:
          severity: critical
          component: supercompute
        annotations:
          summary: "Supercompute fabric health degraded"
          description: "Supercompute fabric health is below 80% (current value: {{ $value | humanizePercentage }})"

---
# Grafana Dashboard Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: novacron
data:
  novacron-overview.json: |
    {
      "dashboard": {
        "title": "NovaCron System Overview",
        "panels": [
          {
            "title": "System Health",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=~\"api-server|frontend|postgres|redis\"}"
              }
            ]
          },
          {
            "title": "API Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])"
              }
            ]
          },
          {
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))"
              }
            ]
          },
          {
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{status=~\"5..\"}[5m])"
              }
            ]
          },
          {
            "title": "Database Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "pg_stat_database_numbackends{datname=\"novacron\"}",
                "legendFormat": "{{datname}} connections"
              }
            ]
          },
          {
            "title": "Redis Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_memory_used_bytes",
                "legendFormat": "Memory used"
              }
            ]
          },
          {
            "title": "P2P Network Status",
            "type": "stat",
            "targets": [
              {
                "expr": "p2p_peer_count"
              }
            ]
          },
          {
            "title": "Federation Status",
            "type": "table",
            "targets": [
              {
                "expr": "federation_cluster_status"
              }
            ]
          },
          {
            "title": "VM Migrations",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(vm_migrations_total[1h])"
              }
            ]
          },
          {
            "title": "Resource Utilization",
            "type": "heatmap",
            "targets": [
              {
                "expr": "cluster_resource_utilization"
              }
            ]
          }
        ]
      }
    }

---
# AlertManager Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: novacron
data:
  alertmanager.yml: |
    global:
      resolve_timeout: 5m
      smtp_from: 'alerts@novacron.io'
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_auth_username: 'alerts@novacron.io'
      smtp_auth_password_file: '/etc/alertmanager/secrets/smtp_password'

    route:
      group_by: ['alertname', 'cluster', 'severity']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'default'
      routes:
        - match:
            severity: critical
          receiver: 'critical'
          continue: true
        - match:
            severity: warning
          receiver: 'warning'
        - match:
            component: security
          receiver: 'security'

    receivers:
      - name: 'default'
        email_configs:
          - to: 'ops@novacron.io'
            headers:
              Subject: 'NovaCron Alert: {{ .GroupLabels.alertname }}'

      - name: 'critical'
        email_configs:
          - to: 'oncall@novacron.io'
            headers:
              Subject: 'CRITICAL: {{ .GroupLabels.alertname }}'
        pagerduty_configs:
          - service_key: 'PAGERDUTY_SERVICE_KEY'
            description: '{{ .GroupLabels.alertname }}: {{ .CommonAnnotations.summary }}'
        slack_configs:
          - api_url: 'SLACK_WEBHOOK_URL'
            channel: '#alerts-critical'
            title: 'Critical Alert'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ end }}'

      - name: 'warning'
        email_configs:
          - to: 'ops@novacron.io'
        slack_configs:
          - api_url: 'SLACK_WEBHOOK_URL'
            channel: '#alerts-warning'
            title: 'Warning'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ end }}'

      - name: 'security'
        email_configs:
          - to: 'security@novacron.io'
            headers:
              Subject: 'SECURITY ALERT: {{ .GroupLabels.alertname }}'
        slack_configs:
          - api_url: 'SLACK_WEBHOOK_URL'
            channel: '#security-alerts'
            title: 'Security Alert'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ .Annotations.description }}\n{{ end }}'

    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'cluster', 'service']

---
# Loki Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: novacron
data:
  config.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100
      grpc_listen_port: 9096

    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory

    schema_config:
      configs:
        - from: 2023-01-01
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h

    ruler:
      alertmanager_url: http://alertmanager:9093

    analytics:
      reporting_enabled: false

    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      ingestion_rate_mb: 10
      ingestion_burst_size_mb: 20

    chunk_store_config:
      max_look_back_period: 0s

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0s

---
# Jaeger Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-config
  namespace: novacron
data:
  sampling.json: |
    {
      "service_strategies": [
        {
          "service": "api-server",
          "type": "adaptive",
          "max_traces_per_second": 100
        },
        {
          "service": "ai-engine",
          "type": "probabilistic",
          "param": 0.1
        }
      ],
      "default_strategy": {
        "type": "probabilistic",
        "param": 0.01
      }
    }

---
# Custom Metrics Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-metrics
  namespace: novacron
data:
  business_metrics.yml: |
    # Business KPIs
    - name: active_vms_total
      help: Total number of active VMs
      type: gauge

    - name: vm_migrations_total
      help: Total number of VM migrations
      type: counter

    - name: federation_clusters_total
      help: Total number of federated clusters
      type: gauge

    - name: p2p_bandwidth_bytes
      help: P2P network bandwidth usage
      type: histogram

    - name: supercompute_jobs_total
      help: Total supercompute jobs executed
      type: counter

    - name: ai_predictions_total
      help: Total AI predictions made
      type: counter

    - name: api_revenue_dollars
      help: API usage revenue
      type: counter

---
# SLA Monitoring Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: sla-monitoring
  namespace: novacron
data:
  sla_targets.yml: |
    targets:
      - name: api_availability
        target: 99.99
        window: 30d
        query: 'avg_over_time(up{job="api-server"}[30d])'

      - name: api_latency_p99
        target: 1000
        unit: ms
        window: 1h
        query: 'histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[1h]))'

      - name: error_rate
        target: 0.1
        unit: percent
        window: 1h
        query: 'rate(http_requests_total{status=~"5.."}[1h])'

      - name: database_availability
        target: 99.95
        window: 30d
        query: 'avg_over_time(up{job="postgresql"}[30d])'

      - name: vm_migration_success_rate
        target: 99.0
        unit: percent
        window: 7d
        query: '1 - (rate(vm_migration_failures_total[7d]) / rate(vm_migrations_total[7d]))'