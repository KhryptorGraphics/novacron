# NovaCron Production Docker Compose
# Production-ready configuration with security hardening and monitoring

version: '3.8'

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

services:
  # Reverse Proxy with SSL Termination
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    command:
      - "--api.dashboard=false"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.address=:80"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--global.sendAnonymousUsage=false"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
    networks:
      - novacron-prod
    security_opt:
      - no-new-privileges:true
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.2'

  # PostgreSQL with High Availability
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./configs/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - novacron-prod
    secrets:
      - db_password
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      <<: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Redis Cluster for Caching
  redis-master:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --port 6379
      --bind 0.0.0.0
      --protected-mode yes
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - redis_master_data:/data
      - ./configs/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - novacron-prod
    security_opt:
      - no-new-privileges:true
    user: "999:999"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      <<: *default-healthcheck
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # NovaCron API Server
  api:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.prod
    image: novacron/api:latest
    restart: unless-stopped
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      LOG_FORMAT: json
      API_PORT: 8090
      WS_PORT: 8091
      DB_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      AUTH_SECRET: ${AUTH_SECRET}
      # Performance tuning
      GOMAXPROCS: "2"
      GOMEMLIMIT: "1536MiB"
    volumes:
      - api_logs:/var/log/novacron
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - novacron-prod
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"  # nobody user
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8090"
    healthcheck:
      test: ["CMD", "/api-server", "healthcheck"]
      <<: *default-healthcheck
    logging: *default-logging
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Frontend with Security Headers
  frontend:
    build:
      context: ../../
      dockerfile: deployment/docker/Dockerfile.frontend.prod
    image: novacron/frontend:latest
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${DOMAIN}
      NEXT_PUBLIC_WS_URL: wss://api.${DOMAIN}/ws
      NEXT_TELEMETRY_DISABLED: 1
    depends_on:
      - api
    networks:
      - novacron-prod
    security_opt:
      - no-new-privileges:true
    user: "101:101"  # nginx user
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/cache/nginx:noexec,nosuid,size=50m
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.middlewares.security-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.routers.frontend.middlewares=security-headers@docker"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      <<: *default-healthcheck
    logging: *default-logging

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.45.0
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - novacron-prod
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`metrics.${DOMAIN}`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    logging: *default-logging

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.0.0
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_SECURITY_COOKIE_SECURE: 'true'
      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN}
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - novacron-prod
    secrets:
      - grafana_password
    security_opt:
      - no-new-privileges:true
    user: "472:472"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    logging: *default-logging

secrets:
  db_password:
    external: true
    name: novacron_db_password
  grafana_password:
    external: true
    name: novacron_grafana_password

volumes:
  traefik_certs:
  postgres_data:
  redis_master_data:
  api_logs:
  prometheus_data:
  grafana_data:

networks:
  novacron-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16