package vm

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/google/uuid"
)

// MigrationType represents the type of migration
type MigrationType string

// Migration type constants are defined in vm_migration_types.go to avoid duplication

// MigrationStatus constants are defined in vm_migration_types.go to avoid duplication

// LegacyMigrationOptions represents legacy options for a migration (use vm_migration_types.go MigrationOptions instead)
type LegacyMigrationOptions struct {
	Type              MigrationType `json:"type"`
	BandwidthLimit    int           `json:"bandwidth_limit_bytes_per_sec"`
	CompressionLevel  int           `json:"compression_level"`
	MemoryIterations  int           `json:"memory_iterations"`
	Force             bool          `json:"force"`
	SkipVerification  bool          `json:"skip_verification"`
}

// DefaultMigrationOptions function is defined in vm_migration_types.go to avoid duplication

// Migration represents a VM migration
type Migration struct {
	ID               string           `json:"id"`
	VMID             string           `json:"vm_id"`
	VMName           string           `json:"vm_name"`
	SourceNodeID     string           `json:"source_node_id"`
	TargetNodeID     string           `json:"target_node_id"`
	Type             MigrationType    `json:"type"`
	Status           MigrationStatus  `json:"status"`
	Options          MigrationOptions `json:"options"`
	StartTime        time.Time        `json:"start_time"`
	EndTime          time.Time        `json:"end_time,omitempty"`
	Progress         float64          `json:"progress"`
	Error            string           `json:"error,omitempty"`
	TransferredBytes int64            `json:"transferred_bytes"`
	TotalBytes       int64            `json:"total_bytes"`
	Speed            float64          `json:"speed_bytes_per_sec"`
}

// MigrationManager manages VM migrations
// MigrationManager is defined in vm_migration_types.go to avoid duplication

// MigrationEvent represents an event related to a migration
// MigrationEvent is defined in vm_migration_types.go to avoid duplication

// NodeManager is an interface for managing nodes
type NodeManager interface {
	// GetNode returns a node by ID
	GetNode(nodeID string) (Node, error)
	
	// ListNodes returns all nodes
	ListNodes() []Node
}

// Node is an interface for a compute node
type Node interface {
	// GetID returns the node ID
	GetID() string
	
	// GetResources returns the node's resources
	GetResources() NodeResources
}

// NodeResources represents a node's resources
type NodeResources struct {
	TotalCPU     int   `json:"total_cpu"`
	UsedCPU      int   `json:"used_cpu"`
	TotalMemoryMB int64 `json:"total_memory_mb"`
	UsedMemoryMB  int64 `json:"used_memory_mb"`
	TotalDiskMB   int64 `json:"total_disk_mb"`
	UsedDiskMB    int64 `json:"used_disk_mb"`
}

// NewMigrationManager creates a new migration manager
func NewMigrationManager(vmManager *VMManager, nodeManager NodeManager) *MigrationManager {
	return &MigrationManager{
		migrations:     make(map[string]*Migration),
		vmManager:      vmManager,
		nodeManager:    nodeManager,
		eventListeners: make(map[string]chan MigrationEvent),
	}
}

// Migrate initiates a VM migration
func (m *MigrationManager) Migrate(vmID, targetNodeID string, options MigrationOptions) (string, error) {
	// Get the VM
	vm, err := m.vmManager.GetVM(vmID)
	if err != nil {
		return "", fmt.Errorf("failed to get VM: %w", err)
	}
	
	// Get the target node
	targetNode, err := m.nodeManager.GetNode(targetNodeID)
	if err != nil {
		return "", fmt.Errorf("failed to get target node: %w", err)
	}
	
	// Check if the VM is already being migrated
	m.migrationsMutex.RLock()
	for _, migration := range m.migrations {
		if migration.VMID == vmID && (migration.Status == MigrationStatusPending || migration.Status == MigrationStatusInProgress) {
			m.migrationsMutex.RUnlock()
			return "", fmt.Errorf("VM %s is already being migrated", vmID)
		}
	}
	m.migrationsMutex.RUnlock()
	
	// Generate a unique ID for the migration
	migrationID := uuid.New().String()
	
	// Create the migration
	migration := &Migration{
		ID:           migrationID,
		VMID:         vmID,
		VMName:       vm.Name(),
		SourceNodeID: vm.NodeID(),
		TargetNodeID: targetNodeID,
		Type:         options.Type,
		Status:       MigrationStatusPending,
		Options:      options,
		StartTime:    time.Now(),
		Progress:     0,
	}
	
	// Store the migration
	m.migrationsMutex.Lock()
	m.migrations[migrationID] = migration
	m.migrationsMutex.Unlock()
	
	// Emit migration created event
	m.emitEvent(MigrationEvent{
		MigrationID: migrationID,
		Type:        "created",
		Status:      MigrationStatusPending,
		Progress:    0,
		Message:     fmt.Sprintf("Migration of VM %s to node %s created", vm.Name(), targetNodeID),
		Timestamp:   time.Now(),
	})
	
	// Start the migration in a goroutine
	go m.executeMigration(migrationID)
	
	return migrationID, nil
}

// GetMigration returns a migration by ID
func (m *MigrationManager) GetMigration(migrationID string) (*Migration, error) {
	m.migrationsMutex.RLock()
	defer m.migrationsMutex.RUnlock()
	
	migration, exists := m.migrations[migrationID]
	if !exists {
		return nil, fmt.Errorf("migration %s not found", migrationID)
	}
	
	return migration, nil
}

// ListMigrations returns all migrations
func (m *MigrationManager) ListMigrations() []Migration {
	m.migrationsMutex.RLock()
	defer m.migrationsMutex.RUnlock()
	
	migrations := make([]Migration, 0, len(m.migrations))
	for _, migration := range m.migrations {
		migrations = append(migrations, *migration)
	}
	
	return migrations
}

// ListMigrationsForVM returns all migrations for a VM
func (m *MigrationManager) ListMigrationsForVM(vmID string) []Migration {
	m.migrationsMutex.RLock()
	defer m.migrationsMutex.RUnlock()
	
	migrations := make([]Migration, 0)
	for _, migration := range m.migrations {
		if migration.VMID == vmID {
			migrations = append(migrations, *migration)
		}
	}
	
	return migrations
}

// CancelMigration cancels a migration
func (m *MigrationManager) CancelMigration(migrationID string) error {
	m.migrationsMutex.Lock()
	defer m.migrationsMutex.Unlock()
	
	migration, exists := m.migrations[migrationID]
	if !exists {
		return fmt.Errorf("migration %s not found", migrationID)
	}
	
	// Check if the migration can be canceled
	if migration.Status != MigrationStatusPending && migration.Status != MigrationStatusInProgress {
		return fmt.Errorf("migration %s cannot be canceled (status: %s)", migrationID, migration.Status)
	}
	
	// Update migration status
	migration.Status = MigrationStatusCanceled
	migration.EndTime = time.Now()
	
	// Emit migration canceled event
	m.emitEvent(MigrationEvent{
		MigrationID: migrationID,
		Type:        "canceled",
		Status:      MigrationStatusCanceled,
		Progress:    migration.Progress,
		Message:     fmt.Sprintf("Migration of VM %s to node %s canceled", migration.VMName, migration.TargetNodeID),
		Timestamp:   time.Now(),
	})
	
	return nil
}

// SubscribeToMigrationEvents subscribes to events for a migration
func (m *MigrationManager) SubscribeToMigrationEvents(migrationID string) (chan MigrationEvent, error) {
	m.eventsMutex.Lock()
	defer m.eventsMutex.Unlock()
	
	// Create a new channel for events
	eventChan := make(chan MigrationEvent, 100)
	
	// Store the channel
	m.eventListeners[migrationID] = eventChan
	
	return eventChan, nil
}

// UnsubscribeFromMigrationEvents unsubscribes from events for a migration
func (m *MigrationManager) UnsubscribeFromMigrationEvents(migrationID string) {
	m.eventsMutex.Lock()
	defer m.eventsMutex.Unlock()
	
	// Close and remove the channel
	if eventChan, exists := m.eventListeners[migrationID]; exists {
		close(eventChan)
		delete(m.eventListeners, migrationID)
	}
}

// emitEvent emits a migration event
func (m *MigrationManager) emitEvent(event MigrationEvent) {
	m.eventsMutex.RLock()
	defer m.eventsMutex.RUnlock()
	
	// Send the event to all listeners
	if eventChan, exists := m.eventListeners[event.MigrationID]; exists {
		select {
		case eventChan <- event:
			// Event sent successfully
		default:
			// Channel is full, log a warning
			log.Printf("Warning: Migration event channel for %s is full, event dropped", event.MigrationID)
		}
	}
}

// executeMigration executes a migration
func (m *MigrationManager) executeMigration(migrationID string) {
	// Get the migration
	m.migrationsMutex.Lock()
	migration, exists := m.migrations[migrationID]
	if !exists {
		m.migrationsMutex.Unlock()
		log.Printf("Error: Migration %s not found", migrationID)
		return
	}
	
	// Update migration status
	migration.Status = MigrationStatusInProgress
	m.migrationsMutex.Unlock()
	
	// Emit migration started event
	m.emitEvent(MigrationEvent{
		MigrationID: migrationID,
		Type:        "started",
		Status:      MigrationStatusInProgress,
		Progress:    0,
		Message:     fmt.Sprintf("Migration of VM %s to node %s started", migration.VMName, migration.TargetNodeID),
		Timestamp:   time.Now(),
	})
	
	// Execute the migration based on type
	var err error
	switch migration.Type {
	case MigrationTypeCold:
		err = m.executeColdMigration(migration)
	case MigrationTypeWarm:
		err = m.executeWarmMigration(migration)
	case MigrationTypeLive:
		err = m.executeLiveMigration(migration)
	default:
		err = fmt.Errorf("unsupported migration type: %s", migration.Type)
	}
	
	// Update migration status
	m.migrationsMutex.Lock()
	defer m.migrationsMutex.Unlock()
	
	migration.EndTime = time.Now()
	
	if err != nil {
		// Migration failed
		migration.Status = MigrationStatusFailed
		migration.Error = err.Error()
		
		// Emit migration failed event
		m.emitEvent(MigrationEvent{
			MigrationID: migrationID,
			Type:        "failed",
			Status:      MigrationStatusFailed,
			Progress:    migration.Progress,
			Message:     fmt.Sprintf("Migration of VM %s to node %s failed: %v", migration.VMName, migration.TargetNodeID, err),
			Timestamp:   time.Now(),
		})
		
		log.Printf("Migration %s failed: %v", migrationID, err)
	} else {
		// Migration completed successfully
		migration.Status = MigrationStatusCompleted
		migration.Progress = 100
		
		// Emit migration completed event
		m.emitEvent(MigrationEvent{
			MigrationID: migrationID,
			Type:        "completed",
			Status:      MigrationStatusCompleted,
			Progress:    100,
			Message:     fmt.Sprintf("Migration of VM %s to node %s completed successfully", migration.VMName, migration.TargetNodeID),
			Timestamp:   time.Now(),
		})
		
		log.Printf("Migration %s completed successfully", migrationID)
	}
}
