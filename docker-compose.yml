# NovaCron Docker Compose - Ubuntu 24.04 with Python 3.12 support
version: '3.8'

services:
  # Postgres database - SECURITY HARDENED
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    user: "70:70"  # postgres user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: novacron
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "11432:5432"  # External port >11111 as required
    volumes:
      - postgres_data:/var/lib/postgresql/data:rw
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    security_opt:
      - "no-new-privileges:true"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/postgresql:noexec,nosuid,size=100m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - novacron-network

  # Hypervisor service - SECURITY HARDENED
  hypervisor:
    build:
      context: .
      dockerfile: docker/hypervisor.Dockerfile
    image: novacron/hypervisor:latest
    restart: unless-stopped
    # REMOVED: privileged: true - CRITICAL SECURITY FIX
    user: "1000:1000"
    environment:
      NODE_ID: node1
      LOG_LEVEL: info
      STORAGE_PATH: /var/lib/novacron/vms
      CLUSTER_ADDR: api:8090
    volumes:
      - hypervisor_data:/var/lib/novacron/vms:rw
      # REMOVED: Direct /var/run/libvirt and /dev/kvm access - use device cgroup instead
    cap_drop:
      - ALL
    cap_add:
      - NET_ADMIN  # Only required capability for network management
    security_opt:
      - "no-new-privileges:true"
      - "seccomp:unconfined"  # Required for hypervisor operations
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run:noexec,nosuid,size=100m
    depends_on:
      - api
    networks:
      - novacron-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # Redis Master for caching and AI Engine - SECURITY HARDENED
  redis-master:
    image: redis:7-alpine
    restart: unless-stopped
    user: "999:999"  # redis user
    command: >
      redis-server
      --port 6379
      --bind 0.0.0.0
      --protected-mode yes
      --requirepass ${REDIS_PASSWORD:-secure_redis_password_change_me}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --appendonly yes
      --dir /data
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data:rw
    cap_drop:
      - ALL
    security_opt:
      - "no-new-privileges:true"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    networks:
      - novacron-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-secure_redis_password_change_me}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'

  # AI Engine service (Python 3.12) - SECURITY HARDENED
  ai-engine:
    build:
      context: .
      dockerfile: ai-engine/Dockerfile
    image: novacron/ai-engine:latest
    restart: unless-stopped
    user: "1000:1000"  # aiengine user from Dockerfile
    environment:
      LOG_LEVEL: info
      PYTHON_VERSION: 3.12
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password_change_me}@redis-master:6379
      MODEL_PATH: /var/lib/novacron/ai-models
    ports:
      - "8093:8093"
    volumes:
      - ai_models:/var/lib/novacron/ai-models:rw
    cap_drop:
      - ALL
    security_opt:
      - "no-new-privileges:true"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=200m
      - /var/log/novacron-ai:noexec,nosuid,size=100m
    depends_on:
      redis-master:
        condition: service_healthy
    networks:
      - novacron-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # API service - SECURITY HARDENED
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    image: novacron/api:latest
    restart: unless-stopped
    user: "1000:1000"  # novacron user from Dockerfile
    environment:
      LOG_LEVEL: info
      API_PORT: 8090
      DB_URL: postgresql://postgres:postgres@postgres:5432/novacron?sslmode=require
      AUTH_SECRET: ${AUTH_SECRET:-changeme_in_production}
      HYPERVISOR_ADDRS: hypervisor:9000
      # Cache configuration with auth
      REDIS_ADDR: redis-master:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-secure_redis_password_change_me}
      CACHE_ENABLED: true
      CACHE_L1_ENABLED: true
      CACHE_L2_ENABLED: true
      CACHE_L3_ENABLED: false
      CACHE_DEFAULT_TTL: 15m
      CACHE_VM_STATE_TTL: 30s
      CACHE_VM_METRICS_TTL: 15s
    ports:
      - "8090:8090"  # REST API
      - "8091:8091"  # WebSocket API
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    security_opt:
      - "no-new-privileges:true"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    depends_on:
      postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
    networks:
      - novacron-network

  # Frontend service - SECURITY HARDENED
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    image: novacron/frontend:latest
    restart: unless-stopped
    user: "1000:1000"  # nextjs user from Dockerfile
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8090
      NEXT_PUBLIC_WS_URL: ws://localhost:8091
    ports:
      - "8092:3000"
    cap_drop:
      - ALL
    security_opt:
      - "no-new-privileges:true"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/.next:noexec,nosuid,size=200m
    depends_on:
      - api
    networks:
      - novacron-network

  # Prometheus for metrics - SECURITY HARDENED
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    user: "65534:65534"  # nobody user
    volumes:
      - ./configs/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:9090'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    cap_drop:
      - ALL
    security_opt:
      - "no-new-privileges:true"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    networks:
      - novacron-network

  # Grafana for visualization - SECURITY HARDENED
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    user: "472:0"  # grafana user
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-piechart-panel
      GF_SECURITY_DISABLE_GRAVATAR: 'true'
      GF_SECURITY_COOKIE_SECURE: 'true'
      GF_SECURITY_COOKIE_SAMESITE: 'strict'
      GF_SECURITY_STRICT_TRANSPORT_SECURITY: 'true'
      GF_SECURITY_X_CONTENT_TYPE_OPTIONS: 'true'
      GF_SECURITY_X_XSS_PROTECTION: 'true'
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana:rw
    ports:
      - "3001:3000"
    cap_drop:
      - ALL
    security_opt:
      - "no-new-privileges:true"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/log/grafana:noexec,nosuid,size=100m
    depends_on:
      - prometheus
    networks:
      - novacron-network

networks:
  novacron-network:
    driver: bridge

volumes:
  postgres_data:
  hypervisor_data:
  prometheus_data:
  grafana_data:
  redis_data:
  ai_models:  # AI engine models storage
