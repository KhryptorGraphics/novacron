version: '3.8'

services:
  # Postgres database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: novacron
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - novacron-network

  # Hypervisor service
  hypervisor:
    build:
      context: .
      dockerfile: docker/hypervisor.Dockerfile
    image: novacron/hypervisor:latest
    restart: unless-stopped
    privileged: true
    environment:
      NODE_ID: node1
      LOG_LEVEL: info
      STORAGE_PATH: /var/lib/novacron/vms
      CLUSTER_ADDR: api:8080
    volumes:
      - hypervisor_data:/var/lib/novacron/vms
      - /var/run/libvirt:/var/run/libvirt
      - /dev/kvm:/dev/kvm
    depends_on:
      - api
    networks:
      - novacron-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G

  # API service
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    image: novacron/api:latest
    restart: unless-stopped
    environment:
      LOG_LEVEL: info
      API_PORT: 8080
      DB_URL: postgresql://postgres:postgres@postgres:5432/novacron
      AUTH_SECRET: ${AUTH_SECRET:-changeme_in_production}
      HYPERVISOR_ADDRS: hypervisor:9000
    ports:
      - "8080:8080"  # REST API
      - "8081:8081"  # WebSocket API
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - novacron-network

  # Frontend service
  frontend:
    build:
      context: .
      dockerfile: docker/frontend.Dockerfile
    image: novacron/frontend:latest
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: ws://localhost:8081
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - novacron-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./configs/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - novacron-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - novacron-network

networks:
  novacron-network:
    driver: bridge

volumes:
  postgres_data:
  hypervisor_data:
  prometheus_data:
  grafana_data:
