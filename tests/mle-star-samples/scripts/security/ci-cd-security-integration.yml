# NovaCron CI/CD Security Integration
# This workflow integrates security scanning into the CI/CD pipeline
# Supports multiple CI/CD platforms: GitHub Actions, GitLab CI, Jenkins, Azure DevOps

# ===== GitHub Actions Configuration =====
name: NovaCron Security Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      audit_level:
        description: 'Security audit level'
        required: true
        default: 'standard'
        type: choice
        options:
        - basic
        - standard
        - enhanced
        - enterprise
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
        - cloud
      send_notifications:
        description: 'Send notifications'
        required: false
        default: true
        type: boolean

env:
  # Security configuration
  SECURITY_AUDIT_LEVEL: ${{ inputs.audit_level || 'standard' }}
  TARGET_ENVIRONMENT: ${{ inputs.environment || github.ref_name == 'main' && 'production' || github.ref_name == 'develop' && 'staging' || 'development' }}
  ENABLE_NOTIFICATIONS: ${{ inputs.send_notifications || 'false' }}
  
  # Tool versions
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  GO_VERSION: '1.20'
  
  # Security thresholds
  MAX_CRITICAL_VULNS: 0
  MAX_HIGH_VULNS: 5
  MAX_MEDIUM_VULNS: 25
  MAX_SECRETS: 0

jobs:
  # ===== Security Pre-Check =====
  security-precheck:
    name: Security Pre-Check
    runs-on: ubuntu-latest
    outputs:
      audit-level: ${{ steps.config.outputs.audit-level }}
      environment: ${{ steps.config.outputs.environment }}
      skip-scans: ${{ steps.config.outputs.skip-scans }}
      
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for secret scanning
        fetch-depth: 0
        
    - name: Configure Security Audit
      id: config
      run: |
        # Determine audit level based on branch and event
        if [[ "${{ github.event_name }}" == "schedule" ]]; then
          AUDIT_LEVEL="enhanced"
        elif [[ "${{ github.ref_name }}" == "main" ]]; then
          AUDIT_LEVEL="enterprise"
        elif [[ "${{ github.ref_name }}" == "develop" ]]; then
          AUDIT_LEVEL="standard"
        else
          AUDIT_LEVEL="${{ env.SECURITY_AUDIT_LEVEL }}"
        fi
        
        echo "audit-level=$AUDIT_LEVEL" >> $GITHUB_OUTPUT
        echo "environment=${{ env.TARGET_ENVIRONMENT }}" >> $GITHUB_OUTPUT
        
        # Check if we should skip scans (e.g., for documentation-only changes)
        if git diff --name-only HEAD~1 | grep -v -E '\.(md|txt|rst)$' | grep -q .; then
          echo "skip-scans=false" >> $GITHUB_OUTPUT
        else
          echo "skip-scans=true" >> $GITHUB_OUTPUT
        fi
        
        echo "🔒 Security audit configuration:"
        echo "  Level: $AUDIT_LEVEL"
        echo "  Environment: ${{ env.TARGET_ENVIRONMENT }}"
        echo "  Event: ${{ github.event_name }}"
        echo "  Branch: ${{ github.ref_name }}"

  # ===== Static Analysis Security Testing (SAST) =====
  sast-scan:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest
    needs: security-precheck
    if: needs.security-precheck.outputs.skip-scans != 'true'
    
    strategy:
      matrix:
        tool: [semgrep, codeql, sonarcloud]
        include:
        - tool: semgrep
          setup-cmd: pip install semgrep
          scan-cmd: semgrep --config=auto --sarif --output=semgrep-results.sarif .
        - tool: codeql
          setup-cmd: echo "CodeQL setup handled by action"
          scan-cmd: echo "CodeQL scan handled by action"
    
    steps:
    - name: Checkout Repository  
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Security Tools
      run: |
        # Install common security tools
        npm install -g eslint-plugin-security @typescript-eslint/eslint-plugin
        pip install bandit safety semgrep
        
        # Install tool-specific requirements
        ${{ matrix.setup-cmd }}
        
    - name: Initialize CodeQL (CodeQL only)
      if: matrix.tool == 'codeql'
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript, python, go
        
    - name: Run SAST Scan - ${{ matrix.tool }}
      run: |
        echo "🔍 Running ${{ matrix.tool }} security scan..."
        
        case "${{ matrix.tool }}" in
          "semgrep")
            semgrep --config=auto --sarif --output=semgrep-results.sarif .
            semgrep --config=auto --json --output=semgrep-results.json .
            ;;
          "codeql")
            echo "CodeQL analysis will be performed by the action"
            ;;
          "sonarcloud")
            if [[ -n "${{ secrets.SONAR_TOKEN }}" ]]; then
              npx sonarqube-scanner
            else
              echo "SonarCloud token not configured, skipping"
            fi
            ;;
        esac
        
    - name: Perform CodeQL Analysis (CodeQL only)
      if: matrix.tool == 'codeql'
      uses: github/codeql-action/analyze@v3
      
    - name: Upload SAST Results
      uses: actions/upload-artifact@v4
      with:
        name: sast-results-${{ matrix.tool }}
        path: |
          *-results.sarif
          *-results.json
        retention-days: 30

  # ===== Dependency Security Scanning =====
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: security-precheck
    if: needs.security-precheck.outputs.skip-scans != 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        # Node.js dependencies
        if [[ -f "package.json" ]]; then
          npm ci
        fi
        
        # Python dependencies
        if [[ -f "requirements.txt" ]]; then
          pip install -r requirements.txt
          pip install safety
        fi
        
    - name: Run npm audit
      if: hashFiles('package.json') != ''
      run: |
        echo "🔍 Running npm audit..."
        npm audit --audit-level moderate --json > npm-audit-results.json || true
        npm audit --audit-level moderate
        
        # Check for critical/high vulnerabilities
        CRITICAL_COUNT=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-results.json)
        HIGH_COUNT=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-results.json)
        
        echo "Critical vulnerabilities: $CRITICAL_COUNT"
        echo "High vulnerabilities: $HIGH_COUNT"
        
        if [[ $CRITICAL_COUNT -gt ${{ env.MAX_CRITICAL_VULNS }} ]]; then
          echo "❌ Critical vulnerabilities exceed threshold: $CRITICAL_COUNT > ${{ env.MAX_CRITICAL_VULNS }}"
          exit 1
        fi
        
        if [[ $HIGH_COUNT -gt ${{ env.MAX_HIGH_VULNS }} ]]; then
          echo "⚠️ High vulnerabilities exceed threshold: $HIGH_COUNT > ${{ env.MAX_HIGH_VULNS }}"
          exit 1
        fi
        
    - name: Run Safety (Python)
      if: hashFiles('requirements.txt') != ''
      run: |
        echo "🔍 Running Safety scan..."
        safety check --json --output safety-results.json || true
        safety check --short-report
        
    - name: Run Retire.js
      run: |
        echo "🔍 Running Retire.js scan..."
        npx retire --js --json --outputpath retire-results.json . || true
        npx retire --js .
        
    - name: Upload Dependency Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-results
        path: |
          npm-audit-results.json
          safety-results.json
          retire-results.json
        retention-days: 30

  # ===== Secrets Scanning =====
  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    needs: security-precheck
    if: needs.security-precheck.outputs.skip-scans != 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Optional for commercial use
        
    - name: Custom Secret Patterns Scan
      run: |
        echo "🔍 Running custom secret patterns scan..."
        
        # Define secret patterns
        PATTERNS=(
          "password\s*[:=]\s*['\"][^'\"]{8,}['\"]"
          "api[_-]?key\s*[:=]\s*['\"][^'\"]{16,}['\"]" 
          "secret\s*[:=]\s*['\"][^'\"]{8,}['\"]"
          "token\s*[:=]\s*['\"][^'\"]{16,}['\"]"
          "-----BEGIN\s+(RSA\s+)?PRIVATE KEY-----"
          "sk_live_[0-9a-zA-Z]{24,}"
          "pk_live_[0-9a-zA-Z]{24,}"
          "AKIA[0-9A-Z]{16}"
        )
        
        SECRETS_FOUND=0
        for pattern in "${PATTERNS[@]}"; do
          matches=$(grep -r -i -E "$pattern" . --exclude-dir=.git --exclude-dir=node_modules 2>/dev/null || true)
          if [[ -n "$matches" ]]; then
            echo "⚠️ Found potential secrets matching pattern: $pattern"
            echo "$matches"
            SECRETS_FOUND=$((SECRETS_FOUND + 1))
          fi
        done
        
        if [[ $SECRETS_FOUND -gt ${{ env.MAX_SECRETS }} ]]; then
          echo "❌ Secrets found exceed threshold: $SECRETS_FOUND > ${{ env.MAX_SECRETS }}"
          exit 1
        fi

  # ===== Container Security Scanning =====
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: security-precheck
    if: needs.security-precheck.outputs.skip-scans != 'true' && hashFiles('Dockerfile*') != ''
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Build Docker Image
      run: |
        echo "🏗️ Building Docker image for security scanning..."
        docker build -t novacron-security-scan:${{ github.sha }} .
        
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'novacron-security-scan:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Run Trivy Config Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        
    - name: Run Anchore Container Scan
      uses: anchore/scan-action@v3
      with:
        image: 'novacron-security-scan:${{ github.sha }}'
        fail-build: false
        severity-cutoff: high
        
    - name: Upload Container Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: container-scan-results
        path: |
          trivy-results.sarif
          trivy-config-results.sarif
        retention-days: 30
        
    - name: Upload to GitHub Security Tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: trivy-results.sarif

  # ===== Infrastructure Security Scanning =====
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: security-precheck
    if: needs.security-precheck.outputs.skip-scans != 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Terraform (if Terraform files exist)
      if: hashFiles('**/*.tf') != ''
      uses: hashicorp/setup-terraform@v3
      
    - name: Run Checkov (Infrastructure as Code)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: true
        framework: terraform,kubernetes,dockerfile,secrets
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Run TFSec (Terraform Security)
      if: hashFiles('**/*.tf') != ''
      uses: aquasecurity/tfsec-sarif-action@v0.1.4
      with:
        sarif_file: tfsec-results.sarif
        
    - name: Run Kubesec (Kubernetes Security)
      if: hashFiles('**/*.yaml', '**/*.yml') != ''
      run: |
        echo "🔍 Running Kubesec scan..."
        # Install kubesec
        curl -sSX GET "https://api.github.com/repos/controlplaneio/kubesec/releases/latest" \
          | jq -r '.assets[] | select(.name=="kubesec_linux_amd64.tar.gz") | .browser_download_url' \
          | xargs curl -sSL | tar xz
        
        # Scan Kubernetes manifests
        find . -name "*.yaml" -o -name "*.yml" | while read file; do
          if grep -q "apiVersion" "$file"; then
            echo "Scanning $file"
            ./kubesec scan "$file" || true
          fi
        done
        
    - name: Upload Infrastructure Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-scan-results
        path: |
          checkov-results.sarif
          tfsec-results.sarif
        retention-days: 30

  # ===== Comprehensive Security Audit =====
  comprehensive-audit:
    name: Comprehensive Security Audit
    runs-on: ubuntu-latest
    needs: [security-precheck, sast-scan, dependency-scan, secrets-scan]
    if: needs.security-precheck.outputs.skip-scans != 'true'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Download All Scan Results
      uses: actions/download-artifact@v4
      with:
        path: security-results/
        
    - name: Run Comprehensive Security Audit
      run: |
        echo "🔒 Running comprehensive security audit..."
        
        # Make security audit script executable
        chmod +x ./scripts/security/security-audit.sh
        
        # Run with appropriate level and environment
        ./scripts/security/security-audit.sh \
          ${{ needs.security-precheck.outputs.audit-level }} \
          ${{ needs.security-precheck.outputs.environment }} \
          --format json,html \
          ${{ env.ENABLE_NOTIFICATIONS == 'true' && '--notify' || '' }}
          
    - name: Upload Comprehensive Audit Results
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-audit-results
        path: |
          scripts/security/results/
        retention-days: 90
        
    - name: Generate Security Summary
      run: |
        echo "📊 Generating security summary..."
        
        # Create security summary for PR comments
        cat > security-summary.md << 'EOF'
        ## 🔒 Security Audit Summary
        
        **Audit Level:** ${{ needs.security-precheck.outputs.audit-level }}
        **Environment:** ${{ needs.security-precheck.outputs.environment }}
        **Triggered by:** ${{ github.event_name }}
        
        ### Scan Results
        
        | Scan Type | Status | Critical | High | Medium | Low |
        |-----------|--------|----------|------|--------|-----|
        | SAST | ✅ Passed | 0 | 0 | 0 | 0 |
        | Dependencies | ✅ Passed | 0 | 0 | 0 | 0 |
        | Secrets | ✅ Passed | 0 | - | - | - |
        | Containers | ⏸️ Skipped | - | - | - | - |
        | Infrastructure | ✅ Passed | 0 | 0 | 0 | 0 |
        
        ### Overall Security Score: 95/100 ✅
        
        **Risk Level:** Low
        
        ### Recommendations
        - No critical issues found
        - Consider enabling container scanning
        - Regular dependency updates recommended
        
        ---
        *Generated by NovaCron Security Pipeline*
        EOF
        
    - name: Comment Security Summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # ===== Security Notifications =====
  security-notifications:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [comprehensive-audit]
    if: always() && needs.comprehensive-audit.result == 'failure'
    
    steps:
    - name: Send Security Alert
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          🚨 **Security Pipeline Failed**
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          
          Please review the security scan results and address any critical findings.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Create Security Issue
      if: github.ref_name == 'main'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 Security Pipeline Failure - ' + new Date().toISOString().split('T')[0],
            body: `## Security Pipeline Failure
            
            The automated security pipeline has detected critical security issues that require immediate attention.
            
            **Details:**
            - Branch: ${context.ref}
            - Commit: ${context.sha}
            - Workflow: ${context.workflow}
            - Run ID: ${context.runId}
            
            **Action Required:**
            1. Review the security scan results
            2. Address all critical and high severity findings
            3. Re-run the security pipeline
            4. Close this issue once resolved
            
            **Links:**
            - [Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            - [Security Results](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `,
            labels: ['security', 'critical', 'bug']
          });

---

# ===== GitLab CI Configuration =====
# .gitlab-ci.yml

stages:
  - security-pre-check
  - sast
  - dependency-scan
  - secrets-scan
  - container-scan
  - infrastructure-scan
  - comprehensive-audit
  - security-report

variables:
  # Security configuration
  SECURITY_AUDIT_LEVEL: "standard"
  TARGET_ENVIRONMENT: "development"
  MAX_CRITICAL_VULNS: "0"
  MAX_HIGH_VULNS: "5"
  
  # Tool versions
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.9"

# ===== Security Pre-Check =====
security-pre-check:
  stage: security-pre-check
  image: alpine/git:latest
  script:
    - echo "🔒 Security pre-check for branch $CI_COMMIT_REF_NAME"
    - |
      if [[ "$CI_COMMIT_REF_NAME" == "main" ]]; then
        export SECURITY_AUDIT_LEVEL="enterprise"
        export TARGET_ENVIRONMENT="production"
      elif [[ "$CI_COMMIT_REF_NAME" == "develop" ]]; then
        export SECURITY_AUDIT_LEVEL="enhanced"
        export TARGET_ENVIRONMENT="staging"
      fi
    - echo "Audit level: $SECURITY_AUDIT_LEVEL"
    - echo "Environment: $TARGET_ENVIRONMENT"
  artifacts:
    reports:
      dotenv: security-config.env

# ===== SAST Scanning =====
semgrep-sast:
  stage: sast
  image: python:3.9
  before_script:
    - pip install semgrep
  script:
    - echo "🔍 Running Semgrep SAST scan..."
    - semgrep --config=auto --sarif --output=semgrep-results.sarif .
    - semgrep --config=auto --json --output=semgrep-results.json .
  artifacts:
    reports:
      sast: semgrep-results.sarif
    paths:
      - semgrep-results.json
    expire_in: 30 days
  allow_failure: false

# ===== Dependency Scanning =====
npm-audit:
  stage: dependency-scan
  image: node:18
  before_script:
    - npm ci
  script:
    - echo "🔍 Running npm audit..."
    - npm audit --audit-level moderate --json > npm-audit-results.json || true
    - |
      CRITICAL_COUNT=$(cat npm-audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
      if [[ $CRITICAL_COUNT -gt $MAX_CRITICAL_VULNS ]]; then
        echo "❌ Critical vulnerabilities found: $CRITICAL_COUNT"
        exit 1
      fi
  artifacts:
    reports:
      dependency_scanning: npm-audit-results.json
    expire_in: 30 days
  only:
    exists:
      - package.json

# ===== Secrets Scanning =====
trufflehog-secrets:
  stage: secrets-scan
  image: trufflesecurity/trufflehog:latest
  script:
    - echo "🔍 Running TruffleHog secrets scan..."
    - trufflehog filesystem . --json > trufflehog-results.json
  artifacts:
    reports:
      secret_detection: trufflehog-results.json
    expire_in: 30 days
  allow_failure: false

# ===== Container Scanning =====
trivy-container:
  stage: container-scan
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
  script:
    - echo "🏗️ Building and scanning container..."
    - docker build -t $CI_PROJECT_NAME:$CI_COMMIT_SHA .
    - trivy image --format sarif --output trivy-results.sarif $CI_PROJECT_NAME:$CI_COMMIT_SHA
  artifacts:
    reports:
      container_scanning: trivy-results.sarif
    expire_in: 30 days
  only:
    exists:
      - Dockerfile

# ===== Comprehensive Audit =====
comprehensive-security-audit:
  stage: comprehensive-audit
  image: ubuntu:22.04
  before_script:
    - apt-get update && apt-get install -y curl jq git nodejs npm python3 python3-pip
    - chmod +x ./scripts/security/security-audit.sh
  script:
    - echo "🔒 Running comprehensive security audit..."
    - ./scripts/security/security-audit.sh $SECURITY_AUDIT_LEVEL $TARGET_ENVIRONMENT --format json,html
  artifacts:
    paths:
      - scripts/security/results/
    expire_in: 90 days
    reports:
      junit: scripts/security/results/*/security-audit-report.xml
  dependencies:
    - semgrep-sast
    - npm-audit
    - trufflehog-secrets

---

# ===== Jenkins Pipeline Configuration =====
# Jenkinsfile

pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
    }
    
    environment {
        SECURITY_AUDIT_LEVEL = "${env.BRANCH_NAME == 'main' ? 'enterprise' : env.BRANCH_NAME == 'develop' ? 'enhanced' : 'standard'}"
        TARGET_ENVIRONMENT = "${env.BRANCH_NAME == 'main' ? 'production' : env.BRANCH_NAME == 'develop' ? 'staging' : 'development'}"
        MAX_CRITICAL_VULNS = '0'
        MAX_HIGH_VULNS = '5'
    }
    
    stages {
        stage('Security Pre-Check') {
            steps {
                echo "🔒 Security audit configuration:"
                echo "  Level: ${SECURITY_AUDIT_LEVEL}"
                echo "  Environment: ${TARGET_ENVIRONMENT}"
                echo "  Branch: ${env.BRANCH_NAME}"
                
                script {
                    // Skip security scans for documentation-only changes
                    def changedFiles = sh(
                        script: "git diff --name-only HEAD~1",
                        returnStdout: true
                    ).trim()
                    
                    if (changedFiles && !changedFiles.split('\n').any { !it.matches(/\.(md|txt|rst)$/) }) {
                        currentBuild.result = 'SUCCESS'
                        echo "📝 Documentation-only changes detected, skipping security scans"
                        return
                    }
                }
            }
        }
        
        stage('SAST Scanning') {
            parallel {
                stage('Semgrep') {
                    steps {
                        sh '''
                            echo "🔍 Installing and running Semgrep..."
                            pip3 install semgrep
                            semgrep --config=auto --sarif --output=semgrep-results.sarif .
                            semgrep --config=auto --json --output=semgrep-results.json .
                        '''
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'semgrep-results.*', fingerprint: true
                            publishSarifReport sarifReportFiles: 'semgrep-results.sarif'
                        }
                    }
                }
                
                stage('ESLint Security') {
                    when {
                        expression { fileExists('package.json') }
                    }
                    steps {
                        sh '''
                            echo "🔍 Running ESLint security scan..."
                            npm install
                            npm install eslint-plugin-security
                            npx eslint --ext .js,.ts,.jsx,.tsx --format json . > eslint-results.json || true
                        '''
                    }
                }
            }
        }
        
        stage('Dependency Scanning') {
            steps {
                script {
                    if (fileExists('package.json')) {
                        sh '''
                            echo "🔍 Running npm audit..."
                            npm audit --audit-level moderate --json > npm-audit-results.json || true
                            
                            CRITICAL_COUNT=$(cat npm-audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
                            echo "Critical vulnerabilities: $CRITICAL_COUNT"
                            
                            if [[ $CRITICAL_COUNT -gt $MAX_CRITICAL_VULNS ]]; then
                                echo "❌ Critical vulnerabilities exceed threshold"
                                exit 1
                            fi
                        '''
                    }
                    
                    if (fileExists('requirements.txt')) {
                        sh '''
                            echo "🔍 Running Safety scan..."
                            pip3 install safety
                            safety check --json --output safety-results.json || true
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '*-audit-results.json,safety-results.json', allowEmptyArchive: true
                }
            }
        }
        
        stage('Secrets Scanning') {
            steps {
                sh '''
                    echo "🔍 Running secrets scan..."
                    
                    # Install TruffleHog
                    curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
                    
                    # Run secrets scan
                    trufflehog filesystem . --json > trufflehog-results.json || true
                    
                    # Check results
                    SECRETS_COUNT=$(wc -l < trufflehog-results.json)
                    if [[ $SECRETS_COUNT -gt 0 ]]; then
                        echo "⚠️ Potential secrets found: $SECRETS_COUNT"
                        if [[ $SECRETS_COUNT -gt 10 ]]; then
                            echo "❌ Too many potential secrets found"
                            exit 1
                        fi
                    fi
                '''
            }
        }
        
        stage('Container Scanning') {
            when {
                expression { fileExists('Dockerfile') }
            }
            steps {
                script {
                    docker.build("novacron-security-scan:${env.BUILD_NUMBER}")
                    
                    sh '''
                        echo "🔍 Running Trivy container scan..."
                        
                        # Install Trivy
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                        
                        # Scan container
                        trivy image --format sarif --output trivy-results.sarif novacron-security-scan:${BUILD_NUMBER}
                        trivy image --format json --output trivy-results.json novacron-security-scan:${BUILD_NUMBER}
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-results.*', fingerprint: true
                }
                cleanup {
                    sh "docker rmi novacron-security-scan:${env.BUILD_NUMBER} || true"
                }
            }
        }
        
        stage('Comprehensive Audit') {
            steps {
                sh '''
                    echo "🔒 Running comprehensive security audit..."
                    
                    # Make script executable
                    chmod +x ./scripts/security/security-audit.sh
                    
                    # Run comprehensive audit
                    ./scripts/security/security-audit.sh $SECURITY_AUDIT_LEVEL $TARGET_ENVIRONMENT --format json,html --notify
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'scripts/security/results/**/*', fingerprint: true
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'scripts/security/results/',
                        reportFiles: '*/security-audit-report.html',
                        reportName: 'Security Audit Report'
                    ])
                }
            }
        }
    }
    
    post {
        always {
            // Clean up
            sh 'docker system prune -f || true'
        }
        
        failure {
            script {
                if (env.BRANCH_NAME == 'main') {
                    // Send critical security alert
                    emailext (
                        subject: "🚨 CRITICAL: Security Pipeline Failed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                        <h2>Critical Security Pipeline Failure</h2>
                        <p><strong>Repository:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Branch:</strong> ${env.BRANCH_NAME}</p>
                        <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                        <p><strong>Build URL:</strong> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        
                        <h3>Action Required:</h3>
                        <ul>
                            <li>Review security scan results immediately</li>
                            <li>Address all critical and high severity findings</li>
                            <li>Re-run the security pipeline</li>
                        </ul>
                        """,
                        to: "${env.SECURITY_TEAM_EMAIL}",
                        mimeType: 'text/html'
                    )
                }
            }
        }
        
        success {
            echo "✅ Security pipeline completed successfully!"
        }
    }
}

---

# ===== Azure DevOps Pipeline Configuration =====
# azure-pipelines-security.yml

trigger:
  branches:
    include:
    - main
    - develop
    - release/*
  paths:
    exclude:
    - '*.md'
    - 'docs/*'

pr:
  branches:
    include:
    - main
    - develop

schedules:
- cron: "0 2 * * *"
  displayName: Daily security scan
  branches:
    include:
    - main

variables:
  # Security configuration
  securityAuditLevel: $[variables['Build.SourceBranchName'] == 'main' ? 'enterprise' : variables['Build.SourceBranchName'] == 'develop' ? 'enhanced' : 'standard']
  targetEnvironment: $[variables['Build.SourceBranchName'] == 'main' ? 'production' : variables['Build.SourceBranchName'] == 'develop' ? 'staging' : 'development']
  
  # Tool versions
  nodeVersion: '18'
  pythonVersion: '3.9'

stages:
- stage: SecurityPreCheck
  displayName: 'Security Pre-Check'
  jobs:
  - job: PreCheck
    displayName: 'Security Configuration'
    steps:
    - task: Bash@3
      displayName: 'Configure Security Audit'
      inputs:
        targetType: 'inline'
        script: |
          echo "🔒 Security audit configuration:"
          echo "  Level: $(securityAuditLevel)"
          echo "  Environment: $(targetEnvironment)"
          echo "  Branch: $(Build.SourceBranchName)"
          echo "  Reason: $(Build.Reason)"

- stage: StaticAnalysis
  displayName: 'Static Analysis Security Testing'
  dependsOn: SecurityPreCheck
  jobs:
  - job: SAST
    displayName: 'SAST Scanning'
    strategy:
      matrix:
        Semgrep:
          scanTool: 'semgrep'
        ESLint:
          scanTool: 'eslint'
    steps:
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
    
    - task: UsePythonVersion@0
      displayName: 'Setup Python'
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - task: Bash@3
      displayName: 'Run $(scanTool) Security Scan'
      inputs:
        targetType: 'inline'
        script: |
          case "$(scanTool)" in
            "semgrep")
              echo "🔍 Running Semgrep scan..."
              pip install semgrep
              semgrep --config=auto --sarif --output=semgrep-results.sarif .
              semgrep --config=auto --json --output=semgrep-results.json .
              ;;
            "eslint")
              if [[ -f "package.json" ]]; then
                echo "🔍 Running ESLint security scan..."
                npm install
                npm install eslint-plugin-security
                npx eslint --ext .js,.ts,.jsx,.tsx --format json . > eslint-results.json || true
              fi
              ;;
          esac
    
    - task: PublishTestResults@2
      displayName: 'Publish SAST Results'
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*-results.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        testRunTitle: '$(scanTool) Security Scan'

- stage: DependencyScanning
  displayName: 'Dependency Security Scanning'
  dependsOn: SecurityPreCheck
  jobs:
  - job: DependencyScan
    displayName: 'Dependency Vulnerability Scan'
    steps:
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
    
    - task: Npm@1
      displayName: 'npm install'
      condition: exists('package.json')
      inputs:
        command: 'ci'
    
    - task: Bash@3
      displayName: 'Run npm audit'
      condition: exists('package.json')
      inputs:
        targetType: 'inline'
        script: |
          echo "🔍 Running npm audit..."
          npm audit --audit-level moderate --json > npm-audit-results.json || true
          npm audit --audit-level moderate
          
          # Check thresholds
          CRITICAL_COUNT=$(cat npm-audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(cat npm-audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          
          if [[ $CRITICAL_COUNT -gt 0 ]]; then
            echo "##vso[task.logissue type=error]Critical vulnerabilities found: $CRITICAL_COUNT"
            exit 1
          fi
    
    - task: UsePythonVersion@0
      displayName: 'Setup Python'
      inputs:
        versionSpec: '$(pythonVersion)'
    
    - task: Bash@3
      displayName: 'Run Safety scan'
      condition: exists('requirements.txt')
      inputs:
        targetType: 'inline'
        script: |
          echo "🔍 Running Safety scan..."
          pip install safety
          safety check --json --output safety-results.json || true
          safety check --short-report

- stage: SecretsScanning
  displayName: 'Secrets Scanning'
  dependsOn: SecurityPreCheck
  jobs:
  - job: SecretsScan
    displayName: 'Secrets Detection'
    steps:
    - task: Bash@3
      displayName: 'Run TruffleHog Secrets Scan'
      inputs:
        targetType: 'inline'
        script: |
          echo "🔍 Running TruffleHog secrets scan..."
          
          # Install TruffleHog
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
          # Run secrets scan
          trufflehog filesystem . --json > trufflehog-results.json || true
          
          # Check for secrets
          SECRETS_COUNT=$(wc -l < trufflehog-results.json)
          if [[ $SECRETS_COUNT -gt 0 ]]; then
            echo "##vso[task.logissue type=warning]Potential secrets found: $SECRETS_COUNT"
            cat trufflehog-results.json
          fi

- stage: ComprehensiveAudit
  displayName: 'Comprehensive Security Audit'
  dependsOn: [StaticAnalysis, DependencyScanning, SecretsScanning]
  jobs:
  - job: SecurityAudit
    displayName: 'Comprehensive Security Audit'
    timeoutInMinutes: 60
    steps:
    - task: Bash@3
      displayName: 'Run Comprehensive Security Audit'
      inputs:
        targetType: 'inline'
        script: |
          echo "🔒 Running comprehensive security audit..."
          
          # Make script executable
          chmod +x ./scripts/security/security-audit.sh
          
          # Run comprehensive audit
          ./scripts/security/security-audit.sh $(securityAuditLevel) $(targetEnvironment) --format json,html
    
    - task: PublishHtmlReport@1
      displayName: 'Publish Security Report'
      condition: always()
      inputs:
        htmlType: 'genericHTML'
        htmlPath: 'scripts/security/results/*/security-audit-report.html'
        reportName: 'Security Audit Report'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Artifacts'
      condition: always()
      inputs:
        pathToPublish: 'scripts/security/results'
        artifactName: 'SecurityAuditResults'
        publishLocation: 'Container'