version: '3.8'

# Docker Compose for NovaCron Load Testing Monitoring Stack
services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: novacron-load-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-config.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert-rules.yml:/etc/prometheus/alert-rules.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "app=novacron-load-test"
      - "component=prometheus"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: novacron-load-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
    labels:
      - "app=novacron-load-test"
      - "component=grafana"

  # InfluxDB for k6 metrics storage
  influxdb:
    image: influxdb:2.7.1
    container_name: novacron-load-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=admin123
      - DOCKER_INFLUXDB_INIT_ORG=novacron
      - DOCKER_INFLUXDB_INIT_BUCKET=k6
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=novacron-k6-load-test-token
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "app=novacron-load-test"
      - "component=influxdb"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: novacron-load-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "app=novacron-load-test"
      - "component=node-exporter"

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: novacron-load-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://novacron:password@postgres:5432/novacron?sslmode=disable
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - postgres
    labels:
      - "app=novacron-load-test"
      - "component=postgres-exporter"

  # Redis Exporter for cache metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: novacron-load-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - redis
    labels:
      - "app=novacron-load-test"
      - "component=redis-exporter"

  # Alertmanager for alert handling
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: novacron-load-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "app=novacron-load-test"
      - "component=alertmanager"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.48.0
    container_name: novacron-load-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "6831:6831/udp"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger-data:/badger
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "app=novacron-load-test"
      - "component=jaeger"

  # Loki for log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: novacron-load-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "app=novacron-load-test"
      - "component=loki"

  # Promtail for log collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: novacron-load-promtail
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log:ro
      - ./reports:/var/log/novacron:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - loki
    labels:
      - "app=novacron-load-test"
      - "component=promtail"

  # Supporting services for complete testing environment
  postgres:
    image: postgres:15.4
    container_name: novacron-load-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=novacron
      - POSTGRES_USER=novacron
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./monitoring/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      - "app=novacron-load-test"
      - "component=postgres"

  redis:
    image: redis:7.2.0
    container_name: novacron-load-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - monitoring
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    labels:
      - "app=novacron-load-test"
      - "component=redis"

# Networks
networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes for persistent data
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local
  alertmanager-data:
    driver: local
  jaeger-data:
    driver: local
  loki-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local