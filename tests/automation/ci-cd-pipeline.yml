# GitHub Actions CI/CD Pipeline for NovaCron Test Automation
name: NovaCron Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  POSTGRES_DB: novacron_test
  POSTGRES_USER: novacron
  POSTGRES_PASSWORD: testpassword
  REDIS_URL: redis://localhost:6379

jobs:
  # Static Analysis and Code Quality
  static-analysis:
    name: Static Analysis & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        go mod download
        
    - name: Run Go static analysis
      run: |
        go vet ./...
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...
        
    - name: Run Go security scan
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
        
    - name: Run JavaScript/TypeScript linting
      run: |
        npm run lint
        npm run typecheck
        
    - name: Run frontend security audit
      run: npm audit --audit-level=moderate
      
    - name: Check code formatting
      run: |
        gofmt -l . | tee /tmp/gofmt.out
        test ! -s /tmp/gofmt.out
        npm run format:check
        
    - name: Dependency vulnerability scan
      uses: snyk/actions/golang@master
      continue-on-error: true
      with:
        args: --severity-threshold=high

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    
    strategy:
      matrix:
        component: [backend, frontend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go (Backend)
      if: matrix.component == 'backend'
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Node.js (Frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        if [ "${{ matrix.component }}" == "backend" ]; then
          go mod download
        else
          npm install
        fi
        
    - name: Run Backend Unit Tests
      if: matrix.component == 'backend'
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./backend/...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Run Frontend Unit Tests
      if: matrix.component == 'frontend'
      run: |
        npm run test:unit -- --coverage --watchAll=false
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: ${{ matrix.component }}
        name: ${{ matrix.component }}-coverage
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.component }}-coverage
        path: |
          coverage.out
          coverage.html
          coverage/

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        go mod download
        npm install
        
    - name: Setup test database
      run: |
        PGPASSWORD=${{ env.POSTGRES_PASSWORD }} psql -h localhost -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f database/migrations/init.sql
        
    - name: Build test binaries
      run: |
        go build -o bin/test-server ./backend/cmd/api-server
        chmod +x bin/test-server
        
    - name: Run Integration Tests
      env:
        DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}?sslmode=disable
        REDIS_URL: ${{ env.REDIS_URL }}
        TEST_ENVIRONMENT: ci
      run: |
        # Start test server in background
        ./bin/test-server --config=configs/test.yaml &
        SERVER_PID=$!
        
        # Wait for server to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8080/health; do sleep 1; done'
        
        # Run integration tests
        npm run test:integration
        go test -v -tags=integration ./tests/integration/...
        
        # Cleanup
        kill $SERVER_PID
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          tests/integration/output/
          test-results/

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install dependencies
      run: |
        npm install
        go mod download
        npx playwright install --with-deps ${{ matrix.browser }}
        
    - name: Build application
      run: |
        npm run build
        go build -o bin/novacron-server ./backend/cmd/api-server
        
    - name: Start services
      run: |
        # Start backend server
        ./bin/novacron-server --config=configs/e2e.yaml &
        BACKEND_PID=$!
        echo $BACKEND_PID > backend.pid
        
        # Start frontend server
        npm run start &
        FRONTEND_PID=$!
        echo $FRONTEND_PID > frontend.pid
        
        # Wait for services to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 1; done'
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
        
    - name: Run E2E tests
      run: |
        npx playwright test --project=${{ matrix.browser }} tests/e2e/
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
          
    - name: Cleanup services
      if: always()
      run: |
        if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi
        if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi

  # Performance Tests
  performance-tests:
    name: Performance & Load Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install k6
      run: |
        wget https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz
        tar -xzf k6-v0.45.0-linux-amd64.tar.gz
        sudo mv k6-v0.45.0-linux-amd64/k6 /usr/local/bin/
        
    - name: Build and start server
      env:
        DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}?sslmode=disable
        REDIS_URL: ${{ env.REDIS_URL }}
      run: |
        go build -o bin/perf-server ./backend/cmd/api-server
        ./bin/perf-server --config=configs/performance.yaml &
        SERVER_PID=$!
        echo $SERVER_PID > server.pid
        
        # Wait for server to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8080/health; do sleep 1; done'
        
    - name: Run Load Tests
      run: |
        k6 run --out json=load-test-results.json tests/performance/load-test.js
        k6 run --out json=stress-test-results.json tests/performance/stress-test.js
        k6 run --out json=spike-test-results.json tests/performance/spike-test.js
        
    - name: Run Benchmark Tests
      run: |
        go test -bench=. -benchmem -cpuprofile=cpu.prof -memprofile=mem.prof ./backend/...
        
    - name: Analyze Performance Results
      run: |
        # Generate performance report
        go run tests/performance/analyzer.go \
          --load-results=load-test-results.json \
          --stress-results=stress-test-results.json \
          --spike-results=spike-test-results.json \
          --benchmark-results=benchmark-results.txt \
          --output=performance-report.html
          
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          *-test-results.json
          performance-report.html
          *.prof
          
    - name: Cleanup
      if: always()
      run: |
        if [ -f server.pid ]; then kill $(cat server.pid) || true; fi

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'security')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        go mod download
        npm install
        
    - name: Run OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:3000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
        
    - name: Run Semgrep SAST
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Mutation Testing
  mutation-tests:
    name: Mutation Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        go mod download
        npm install
        go install github.com/zimmski/go-mutesting/cmd/go-mutesting@latest
        npm install -g stryker-cli
        
    - name: Run Go mutation tests
      run: |
        go-mutesting --filter=".*_test\.go" ./backend/core/auth/
        go-mutesting --filter=".*_test\.go" ./backend/core/vm/
        
    - name: Run JavaScript mutation tests
      run: |
        cd frontend
        npx stryker run
        
    - name: Upload mutation test results
      uses: actions/upload-artifact@v3
      with:
        name: mutation-test-results
        path: |
          mutation-results/
          reports/

  # Coverage Analysis and Reporting
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all coverage artifacts
      uses: actions/download-artifact@v3
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install coverage tools
      run: |
        go install github.com/wadey/gocovmerge@latest
        npm install -g nyc
        
    - name: Merge coverage reports
      run: |
        # Merge Go coverage
        gocovmerge backend-coverage/coverage.out integration-coverage/coverage.out > merged-coverage.out
        
        # Generate HTML report
        go tool cover -html=merged-coverage.out -o coverage-report.html
        
        # Calculate coverage percentage
        COVERAGE=$(go tool cover -func=merged-coverage.out | grep total | awk '{print $3}')
        echo "Total coverage: $COVERAGE"
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
        
    - name: Coverage Quality Gate
      run: |
        # Extract percentage number
        COVERAGE_NUM=$(echo $COVERAGE_PERCENTAGE | sed 's/%//')
        
        # Check if coverage meets minimum threshold (80%)
        if (( $(echo "$COVERAGE_NUM < 80" | bc -l) )); then
          echo "Coverage $COVERAGE_PERCENTAGE is below 80% threshold"
          exit 1
        else
          echo "Coverage $COVERAGE_PERCENTAGE meets threshold"
        fi
        
    - name: Update coverage badge
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ secrets.COVERAGE_GIST_ID }}
        filename: novacron-coverage.json
        label: Coverage
        message: ${{ env.COVERAGE_PERCENTAGE }}
        color: green
        
    - name: Upload final coverage report
      uses: actions/upload-artifact@v3
      with:
        name: final-coverage-report
        path: |
          coverage-report.html
          merged-coverage.out

  # Test Results Summary
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, coverage-analysis]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate test summary
      run: |
        cat << 'EOF' > test-summary.md
        # Test Results Summary
        
        ## Test Status
        - Unit Tests: ${{ needs.unit-tests.result }}
        - Integration Tests: ${{ needs.integration-tests.result }}
        - E2E Tests: ${{ needs.e2e-tests.result }}
        - Coverage Analysis: ${{ needs.coverage-analysis.result }}
        
        ## Coverage
        Final coverage: ${{ env.COVERAGE_PERCENTAGE }}
        
        ## Artifacts
        - Coverage reports available in artifacts
        - E2E test videos and screenshots available
        - Performance test results (if run)
        
        EOF
        
    - name: Comment PR with test summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Deployment (only on main branch with all tests passing)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, coverage-analysis]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.novacron.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here
        
    - name: Run smoke tests
      run: |
        # Run basic smoke tests against staging
        curl -f https://staging.novacron.com/health
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()