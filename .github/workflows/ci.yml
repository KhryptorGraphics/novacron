name: NovaCron CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  go-backend:
    name: Go Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/core
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
          cache: true
          cache-dependency-path: backend/core/go.sum
      
      - name: Install dependencies
        run: go mod download
      
      - name: Verify dependencies
        run: go mod verify
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/core/coverage.out
          flags: backend-go

  python-services:
    name: Python Services Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/services
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests
        run: |
          pytest --cov=. --cov-report=xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: backend/services/coverage.xml
          flags: backend-python

  frontend:
    name: Frontend Build & Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test -- --coverage
      
      - name: Build
        run: npm run build
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [go-backend, python-services, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build hypervisor image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/hypervisor.Dockerfile
          push: false
          tags: novacron/hypervisor:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/api.Dockerfile
          push: false
          tags: novacron/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/frontend.Dockerfile
          push: false
          tags: novacron/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner for Go
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend/core'
          format: 'sarif'
          output: 'trivy-results-go.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Run Trivy vulnerability scanner for Python
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'backend/services'
          format: 'sarif'
          output: 'trivy-results-python.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Run Trivy vulnerability scanner for frontend
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'frontend'
          format: 'sarif'
          output: 'trivy-results-frontend.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Go scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-go.sarif'
          category: 'go-trivy'
      
      - name: Upload Python scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-python.sarif'
          category: 'python-trivy'
      
      - name: Upload frontend scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-frontend.sarif'
          category: 'frontend-trivy'
